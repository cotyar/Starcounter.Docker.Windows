<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Starcounter.Server</name>
    </assembly>
    <members>
        <member name="T:Starcounter.Server.Commands.ICommandProcessor">
            <summary>
            Defines the interface of a server command processor.
            </summary>
        </member>
        <member name="T:Starcounter.Server.Commands.InternalCommands.DropDeletedDatabaseFilesCommand">
            <summary>
            Allows the server to dispatch a task that will try to drop orphaned,
            deleted database files.
            </summary>
        </member>
        <member name="F:Starcounter.Server.Commands.InternalCommands.DropDeletedDatabaseFilesCommand.DatabaseKey">
            <summary>
            Gets an optional key that can be used to scope this command
            to a particular identified database instance, uniquely named
            by the given key.
            </summary>
            <remarks>
            The default is to process any orphaned database file collection
            for the specified database.
            </remarks>
        </member>
        <member name="F:Starcounter.Server.Commands.InternalCommands.DropDeletedDatabaseFilesCommand.LastAttempt">
            <summary>
            Gets or sets the time of the last attempt to run this command.
            Used by the server to retry failed attempts up until a certain
            retry count.
            </summary>
        </member>
        <member name="F:Starcounter.Server.Commands.InternalCommands.DropDeletedDatabaseFilesCommand.RetryCount">
            <summary>
            Gets or sets number of retry attempts for this command.
            </summary>
        </member>
        <member name="M:Starcounter.Server.Commands.InternalCommands.DropDeletedDatabaseFilesCommand.#ctor(Starcounter.Server.ServerEngine,System.String,System.String)">
            <summary>
            Initializes a new <see cref="T:Starcounter.Server.Commands.InternalCommands.DropDeletedDatabaseFilesCommand"/>.
            </summary>
            <param name="engine">The server engine the command runs in.</param>
            <param name="databaseName">The name of the database.</param>
            <param name="key">Optional database key to scope this command to.</param>
        </member>
        <member name="M:Starcounter.Server.Commands.DeleteDatabaseCommandProcessor.#ctor(Starcounter.Server.ServerEngine,Starcounter.Server.PublicModel.Commands.ServerCommand)">
            <summary>
            Initializes a new <see cref="T:Starcounter.Server.Commands.DeleteDatabaseCommandProcessor"/>.
            </summary>
            <param name="server">The server in which the processor executes.</param>
            <param name="command">The <see cref="!:DeletedDatabaseCommand"/> the
            processor should exeucte.</param>
        </member>
        <member name="M:Starcounter.Server.Commands.DeleteDatabaseCommandProcessor.Execute">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Server.Commands.DropDeletedDatabaseFilesCommandProcessor.#ctor(Starcounter.Server.ServerEngine,Starcounter.Server.PublicModel.Commands.ServerCommand)">
            <summary>
            Initializes a new <see cref="T:Starcounter.Server.Commands.DropDeletedDatabaseFilesCommandProcessor"/>.
            </summary>
            <param name="server">The server in which the processor executes.</param>
            <param name="command">The <see cref="T:Starcounter.Server.Commands.InternalCommands.DropDeletedDatabaseFilesCommand"/> the
            processor should exeucte.</param>
        </member>
        <member name="M:Starcounter.Server.Commands.DropDeletedDatabaseFilesCommandProcessor.RunOnce(Starcounter.Server.ServerEngine,Starcounter.Server.DeletedDatabaseFile)">
            <summary>
            Runs the functionality of this processor once, in the scope of
            the caller.
            </summary>
            <param name="engine">The server engine in which to run the
            processor.</param>
            <param name="file">The file whose related files that are to be
            dropped from the file system.</param>
        </member>
        <member name="M:Starcounter.Server.Commands.InvokableCommandProcessor.#ctor(Starcounter.Server.ServerEngine,Starcounter.Server.PublicModel.Commands.ServerCommand)">
            <summary>
            Initializes a new <see cref="T:Starcounter.Server.Commands.InvokableCommandProcessor"/>.
            </summary>
            <param name="server">The server in which the processor executes.</param>
            <param name="command">The <see cref="T:Starcounter.Server.PublicModel.Commands.InvokableCommand"/> the
            processor should exeucte.</param>
        </member>
        <member name="M:Starcounter.Server.Commands.InvokableCommandProcessor.Execute">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Server.Commands.CreateDatabaseCommandProcessor.#ctor(Starcounter.Server.ServerEngine,Starcounter.Server.PublicModel.Commands.ServerCommand)">
            <summary>
            Initializes a new <see cref="T:Starcounter.Server.Commands.CreateDatabaseCommandProcessor"/>.
            </summary>
            <param name="server">The server in which the processor executes.</param>
            <param name="command">The <see cref="T:Starcounter.Server.PublicModel.Commands.CreateDatabaseCommand"/> the
            processor should exeucte.</param>
        </member>
        <member name="M:Starcounter.Server.Commands.CreateDatabaseCommandProcessor.Execute">
            <inheritdoc />
        </member>
        <member name="T:Starcounter.Server.Commands.StartExecutableCommandProcessor">
            <summary>
            Executes a queued and dispatched <see cref="T:Starcounter.Server.PublicModel.Commands.StartExecutableCommand"/>.
            </summary>
        </member>
        <member name="M:Starcounter.Server.Commands.StartExecutableCommandProcessor.#ctor(Starcounter.Server.ServerEngine,Starcounter.Server.PublicModel.Commands.ServerCommand)">
            <summary>
            Initializes a new <see cref="T:Starcounter.Server.Commands.StartExecutableCommandProcessor"/>.
            </summary>
            <param name="server">The server in which the processor executes.</param>
            <param name="command">The <see cref="T:Starcounter.Server.PublicModel.Commands.StartExecutableCommand"/> the
            processor should exeucte.</param>
        </member>
        <member name="M:Starcounter.Server.Commands.StartExecutableCommandProcessor.Execute">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Server.Commands.StartExecutableCommandProcessor.CopyAllFilesToRunNoDbApplication(System.String,System.String)">
            <summary>
            Adapts to the (temporary) NoDb switch by copying all binary
            files possibly referenced by the starting assembly, as given
            by <paramref name="assemblyPath"/>, including the starting
            assembly itself.
            </summary>
            <param name="assemblyPath">Full path to the original assembly,
            i.e. the assembly we are told to execute.</param>
            <param name="runtimeDirectory">The runtime directory where the
            assembly will actually run from, when hosted in Starcounter.</param>
            <returns>Full path to the assembly that is about to be executed.
            </returns>
        </member>
        <member name="M:Starcounter.Server.Commands.Processors.StartDatabaseCommandProcessor.#ctor(Starcounter.Server.ServerEngine,Starcounter.Server.PublicModel.Commands.ServerCommand)">
            <summary>
            Initializes a new <see cref="T:Starcounter.Server.Commands.Processors.StartDatabaseCommandProcessor"/>.
            </summary>
            <param name="server">The server in which the processor executes.</param>
            <param name="command">The <see cref="T:Starcounter.Server.PublicModel.Commands.StartDatabaseCommand"/> the
            processor should exeucte.</param>
        </member>
        <member name="M:Starcounter.Server.Commands.Processors.StartDatabaseCommandProcessor.Execute">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Server.Commands.Processors.StopDatabaseCommandProcessor.#ctor(Starcounter.Server.ServerEngine,Starcounter.Server.PublicModel.Commands.ServerCommand)">
            <summary>
            Initializes a new <see cref="T:Starcounter.Server.Commands.Processors.StopDatabaseCommandProcessor"/>.
            </summary>
            <param name="server">The server in which the processor executes.</param>
            <param name="command">The <see cref="T:Starcounter.Server.PublicModel.Commands.StopDatabaseCommand"/> the
            processor should exeucte.</param>
        </member>
        <member name="M:Starcounter.Server.Commands.Processors.StopDatabaseCommandProcessor.Execute">
            <inheritdoc />
        </member>
        <member name="T:Starcounter.Server.Commands.CommandDispatcher">
            <summary>
            Dispatches commands to their <see cref="T:Starcounter.Server.Commands.CommandProcessor"/>
            and enqueue them for execution.
            </summary>
        </member>
        <member name="M:Starcounter.Server.Commands.CommandDispatcher.Enqueue(Starcounter.Server.PublicModel.Commands.ServerCommand,System.Predicate{Starcounter.Server.PublicModel.CommandId},Starcounter.Server.Commands.CommandProcessor,System.Action{Starcounter.Server.PublicModel.CommandId})">
            <summary>
            Enqueues a command for immediate execution.
            </summary>
            <param name="command">The <see cref="T:Starcounter.Server.PublicModel.Commands.ServerCommand"/> to enqueue.</param>
            <param name="cancellationPredicate">An optional cancellation predicate in
            the host that will periodically be queried to see if a command are to be
            processed.
            </param>
            <param name="correlatingTo">An optional command, represented by a
            <see cref="T:Starcounter.Server.Commands.CommandProcessor"/>, the given command correlates to.</param>
            <param name="completionCallback">Optional callback that will be invoked
            when the executed command completes.
            </param>
            <returns>The <see cref="T:Starcounter.Server.Commands.CommandProcessor"/> instance that was created to process this <paramref name="command"/>.</returns>
        </member>
        <member name="M:Starcounter.Server.Commands.CommandDispatcher.DiscoverAssembly(System.Reflection.Assembly)">
            <summary>
            Discovers the command processors (<see cref="T:Starcounter.Server.Commands.CommandProcessor"/>) present in an assembly.
            </summary>
            <param name="assembly">An assembly containing types derived from <see cref="T:Starcounter.Server.Commands.CommandProcessor"/>.</param>
        </member>
        <member name="T:Starcounter.Server.Commands.CommandProcessor">
            <summary>
            Command processors execute commands specified in <see cref="T:Starcounter.Server.PublicModel.Commands.ServerCommand"/> objects. This class
            is the base of all command processors.
            </summary>
            <remarks>
            Command processors should be annotated with the <see cref="T:Starcounter.Server.Commands.CommandProcessorAttribute"/> custom
            attribute.
            </remarks>
        </member>
        <member name="F:Starcounter.Server.Commands.CommandProcessor.completedEvent">
            <summary>
            Event reference we use for processors that are instructed to support
            waiting by means of signaling (instead of polling).
            </summary>
        </member>
        <member name="M:Starcounter.Server.Commands.CommandProcessor.#ctor(Starcounter.Server.ServerEngine,Starcounter.Server.PublicModel.Commands.ServerCommand)">
            <summary>
            Initializes a new <see cref="T:Starcounter.Server.Commands.CommandProcessor"/>.
            </summary>
        </member>
        <member name="M:Starcounter.Server.Commands.CommandProcessor.#ctor(Starcounter.Server.ServerEngine,Starcounter.Server.PublicModel.Commands.ServerCommand,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:Starcounter.Server.Commands.CommandProcessor"/>.
            </summary>
        </member>
        <member name="P:Starcounter.Server.Commands.CommandProcessor.IsPublic">
            <summary>
            Gets a value indicating if this processor is public, i.e. it
            does expose state, progress and result to the public model.
            </summary>
            <remarks>
            <see cref="P:Starcounter.Server.Commands.CommandProcessorAttribute.IsInternal"/>
            </remarks>
        </member>
        <member name="P:Starcounter.Server.Commands.CommandProcessor.Engine">
            <summary>
            Gets the server on which the current processor executes.
            </summary>
        </member>
        <member name="P:Starcounter.Server.Commands.CommandProcessor.Command">
            <summary>
            Gets the command processed by the current processor.
            </summary>
        </member>
        <member name="P:Starcounter.Server.Commands.CommandProcessor.Id">
            <summary>
            Gets a unique identifier of this command in the exeucting
            <see cref="T:Starcounter.Server.ServerEngine"/>.
            </summary>
        </member>
        <member name="P:Starcounter.Server.Commands.CommandProcessor.CorrelatedCommand">
            <summary>
            Gets the command to which the current command is correlated,
            i.e. typically the command that caused the current command to be queued.
            </summary>
        </member>
        <member name="P:Starcounter.Server.Commands.CommandProcessor.EndTime">
            <summary>
            Time at which the command ended, or <b>null</b> if the command did not end yet.
            </summary>
        </member>
        <member name="P:Starcounter.Server.Commands.CommandProcessor.Errors">
            <summary>
            Errors that occured during command execution, or <b>null</b> if the command did not complete
            or did not complete with errors.
            </summary>
        </member>
        <member name="P:Starcounter.Server.Commands.CommandProcessor.Status">
            <summary>
            Command status.
            </summary>
        </member>
        <member name="P:Starcounter.Server.Commands.CommandProcessor.CancellationPredicate">
            <summary>
            Gets or sets an optional predicate that are to be
            queried periodically by the current processor to see if
            command processing should be cancelled.
            </summary>
        </member>
        <member name="P:Starcounter.Server.Commands.CommandProcessor.CompletionCallback">
            <summary>
            Gets or sets an optional callback that are to be invoked
            when the current processor completes.
            </summary>
        </member>
        <member name="M:Starcounter.Server.Commands.CommandProcessor.SetResult(System.Object,System.Nullable{System.Int32})">
            <summary>
            Provides a way for processors to attach an optional exit
            code and a result to the ending of their processing.
            The code/result will be published with the latest/final
            snapshot of the command when the processor has completed
            (either sucessfully or erred).
            </summary>
            <param name="result">The result, an opaque object.</param>
            <param name="exitCode">The exit code.</param>
        </member>
        <member name="M:Starcounter.Server.Commands.CommandProcessor.SetFailed(Starcounter.Server.PublicModel.ErrorInfo[])">
            <summary>
            Updates the status of the current command to <see cref="F:Starcounter.Server.PublicModel.CommandStatus.Failed"/>.
            </summary>
            <param name="errors">Description of the error that has happened.</param>
        </member>
        <member name="M:Starcounter.Server.Commands.CommandProcessor.SetCompleted">
            <summary>
            Updates the status of the current command to <see cref="F:Starcounter.Server.PublicModel.CommandStatus.Completed"/>,
            or <see cref="F:Starcounter.Server.PublicModel.CommandStatus.Cancelled"/> if the command was cancelled.
            </summary>
        </member>
        <member name="M:Starcounter.Server.Commands.CommandProcessor.ToPublicModel">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Server.Commands.CommandProcessor.OnEnqueued(Starcounter.Server.Commands.CommandProcessor)">
            <summary>
            Enqueues the current command for execution, speciyfing the
            <see cref="T:Starcounter.Server.Commands.CommandProcessor"/> it correlates to.
            </summary>
            <param name="correlatingTo">A command, represented by a <see cref="T:Starcounter.Server.Commands.CommandProcessor"/>,
            this command correlates to.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Starcounter.Server.Commands.CommandProcessor.Execute">
            <summary>
            Executes the current command.
            </summary>
        </member>
        <member name="M:Starcounter.Server.Commands.CommandProcessor.ToErrorInfo">
            <summary>
            Returns the <see cref="T:Starcounter.Server.PublicModel.ErrorInfo"/> used to represent failure to
            execute this command processor.
            </summary>
            <remarks>
            Specialized command processors can choose to override this method
            to provide general errors other than the default.
            </remarks>
            <returns>An <see cref="T:Starcounter.Server.PublicModel.ErrorInfo"/> describing the general, failed
            operation of an unsuccessful command processor.</returns>
        </member>
        <member name="M:Starcounter.Server.Commands.CommandProcessor.SuppressLoggingForError(System.UInt32)">
            <summary>
            Gets a value indicating of logging of a given error should be
            suppressed.
            </summary>
            <param name="errorCode">The error code to evaluate.</param>
            <returns>True if the error should not be logged.</returns>
        </member>
        <member name="M:Starcounter.Server.Commands.CommandProcessor.ToDefaultErrorInfo">
            <summary>
            Gets the default <see cref="T:Starcounter.Server.PublicModel.ErrorInfo"/>, utilized by the server
            when a command processor specific <see cref="T:Starcounter.Server.PublicModel.ErrorInfo"/> could
            not be successfully retreived.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Starcounter.Server.Commands.CommandProcessor.Log">
            <summary>
            Gets the default <see cref="T:Starcounter.Logging.LogSource"/> this processor should use
            when logging.
            </summary>
        </member>
        <member name="M:Starcounter.Server.Commands.CommandProcessor.WithinTask(Starcounter.Server.Commands.CommandTask,System.Action{Starcounter.Server.Commands.CommandTask})">
            <summary>
            Executes <paramref name="action"/> in between a begin and
            end of the <see cref="T:Starcounter.Server.Commands.CommandTask"/> <paramref name="task"/>.
            </summary>
            <remarks>
            If an exception is raised from the given action, this method
            does invoke the end method for the task.
            </remarks>
            <param name="task">The <see cref="T:Starcounter.Server.Commands.CommandTask"/> that is
            progressing while the given action executes.</param>
            <param name="action">The code to execute.</param>
        </member>
        <member name="M:Starcounter.Server.Commands.CommandProcessor.WithinTask(Starcounter.Server.Commands.CommandTask,System.Func{Starcounter.Server.Commands.CommandTask,System.Boolean})">
            <summary>
            Executes <paramref name="func"/> in between a begin and
            end of the <see cref="T:Starcounter.Server.Commands.CommandTask"/> <paramref name="task"/>.
            </summary>
            <remarks>
            If an exception is raised from the given function, this method
            does invoke the end method for the task.
            </remarks>
            <param name="task">The <see cref="T:Starcounter.Server.Commands.CommandTask"/> that is
            progressing while the given action executes.</param>
            <param name="func">The code to execute. The ending of the task
            can be marked as cancelled by returning false from the func.</param>
        </member>
        <member name="M:Starcounter.Server.Commands.CommandProcessor.WithinTaskIf(System.Boolean,Starcounter.Server.Commands.CommandTask,System.Action{Starcounter.Server.Commands.CommandTask})">
            <summary>
            Executes <paramref name="action"/> in between a begin and
            end of the <see cref="T:Starcounter.Server.Commands.CommandTask"/> <paramref name="task"/>,
            based on a given condition.
            </summary>
            <remarks>
            If an exception is raised from the given action, this method
            does invoke the end method for the task.
            </remarks>
            <param name="condition">If <c>true</c>, the
            action is executed; otherwise, this method instantly return.
            </param>
            <param name="task">The <see cref="T:Starcounter.Server.Commands.CommandTask"/> that is
            progressing while the given action executes.</param>
            <param name="action">The code to execute.</param>
        </member>
        <member name="M:Starcounter.Server.Commands.CommandProcessor.ProgressTask(Starcounter.Server.Commands.CommandTask,System.Int32)">
            <summary>
            Progresses a task by value.
            </summary>
            <param name="task">The <see cref="T:Starcounter.Server.Commands.CommandTask"/> to progress.
            </param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Starcounter.Server.Commands.CommandProcessor.ProgressTask(Starcounter.Server.Commands.CommandTask,System.String)">
            <summary>
            Progresses a task by updating the text of the current
            activity.
            </summary>
            <param name="task">The <see cref="T:Starcounter.Server.Commands.CommandTask"/> to progress.
            </param>
            <param name="newActivity">The new activity.</param>
        </member>
        <member name="M:Starcounter.Server.Commands.CommandProcessor.ProgressTask(Starcounter.Server.Commands.CommandTask,System.Int32,System.String)">
            <summary>
            Progresses a task by value and updates the text of the current
            activity.
            </summary>
            <param name="task">The <see cref="T:Starcounter.Server.Commands.CommandTask"/> to progress.
            </param>
            <param name="newValue">The new value.</param>
            <param name="newActivity">The new activity.</param>
        </member>
        <member name="M:Starcounter.Server.Commands.CommandProcessor.BeginTask(Starcounter.Server.Commands.CommandTask)">
            <summary>
            Begins a task with no defined max value, i.e. used by 
            all tasks that are indeterminate.
            </summary>
            <param name="task">The <see cref="T:Starcounter.Server.Commands.CommandTask"/> that is
            about to begin.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Starcounter.Server.Commands.CommandProcessor.CancelTask(Starcounter.Server.Commands.CommandTask)" -->
        <member name="M:Starcounter.Server.Commands.CommandProcessor.EndTask(Starcounter.Server.Commands.CommandTask,System.Boolean)">
            <summary>
            Ends a single task.
            </summary>
            <param name="task">The task to end.</param>
            <param name="cancel">Indicates if the task should
            be marked as cancelled or fulfilled.</param>
        </member>
        <member name="M:Starcounter.Server.Commands.CommandProcessor.EndTasks(Starcounter.Server.Commands.CommandTask[])">
            <summary>
            Ends a set of tasks.
            </summary>
            <param name="tasks">The tasks to end.</param>
        </member>
        <member name="M:Starcounter.Server.Commands.CommandProcessor.EndSingleProgress(Starcounter.Server.PublicModel.ProgressInfo,System.Boolean)">
            <summary>
            Ends a single progress info.
            </summary>
            <param name="info">The progress to end.</param>
            <param name="cancel">Indicates if the progress should be considered
            cancelled or not.</param>
        </member>
        <member name="M:Starcounter.Server.Commands.CommandProcessor.EndAllProgress(System.Boolean)">
            <summary>
            Assures every task with possibly registered progress is
            marked ended.
            </summary>
            <remarks>
            Used when a processor ends successfully and prior to its
            state/status is published; therefore, don't invoke
            notification of any change here.
            </remarks>
            <param name="cancel">Indicates if any outstanding progress
            should be considered cancelled or not.</param>
        </member>
        <member name="M:Starcounter.Server.Commands.CommandProcessor.CreateToken(System.Type)">
            <summary>
            Gets a value representing a token that identifies the command
            type of the <see cref="T:System.Type"/> supplied.
            </summary>
            <remarks>
            The command type token is used when publishing metadata about
            commands, such as a command type level description.
            </remarks>
        </member>
        <member name="T:Starcounter.Server.Commands.CommandProcessorAttribute">
            <summary>
            Custom attribute that, when applied on a class derived from <see cref="T:Starcounter.Server.Commands.CommandProcessor"/>,
            specifies which type of command the current <see cref="T:Starcounter.Server.Commands.CommandProcessor"/> is able
            to process.
            </summary>
        </member>
        <member name="M:Starcounter.Server.Commands.CommandProcessorAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new <see cref="T:Starcounter.Server.Commands.CommandProcessorAttribute"/>.
            </summary>
            <param name="commandType">A type derived from <see cref="T:Starcounter.Server.PublicModel.Commands.ServerCommand"/>.</param>
        </member>
        <member name="P:Starcounter.Server.Commands.CommandProcessorAttribute.CommandType">
            <summary>
            Gets the type of command that the related <see cref="T:Starcounter.Server.Commands.CommandProcessor"/> can execute.
            </summary>
        </member>
        <member name="P:Starcounter.Server.Commands.CommandProcessorAttribute.IsInternal">
            <summary>
            Gets or sets a value if the processor to which this attribute is
            applied should be considered an internal command processor, meaning
            that it is never represented in the public model. The execution of
            internal commands can hence never be seen or tracked by management
            clients.
            </summary>
        </member>
        <member name="T:Starcounter.Server.Commands.CommandTask">
            <summary>
            Server representation of a task possibly executing
            as part of a command.
            </summary>
        </member>
        <member name="P:Starcounter.Server.Commands.CommandTask.ID">
            <summary>
            Numeric identity of the task, used to send over the wire
            when reporting about progress.
            </summary>
            <remarks>
            When the server accumulates progress about an executing command,
            each progress record will relate to a given task, identified by
            this identity.
            </remarks>
        </member>
        <member name="P:Starcounter.Server.Commands.CommandTask.ShortText">
            <summary>
            A short text, typically a single line, describing what the
            task does.
            </summary>
        </member>
        <member name="P:Starcounter.Server.Commands.CommandTask.Description">
            <summary>
            A possibly long description about what this task does.
            </summary>
        </member>
        <member name="P:Starcounter.Server.Commands.CommandTask.Duration">
            <summary>
            The normal/expected duration of this task.
            </summary>
        </member>
        <member name="P:Starcounter.Server.Commands.CommandTask.ProgressUnits">
            <summary>
            Specifies the units for tasks that reports progress
            by numbers, i.e. "Percentage", "Files", "Kilobytes",
            etc.
            </summary>
        </member>
        <member name="M:Starcounter.Server.Commands.CommandTask.#ctor(System.Int32,System.String,Starcounter.Server.PublicModel.TaskDuration)">
            <summary>
            Initializes a <see cref="T:Starcounter.Server.Commands.CommandTask"/>
            </summary>
            <param name="id">The identity to use.</param>
            <param name="shortText">A short textual description of the task</param>
            <param name="duration">The expected <see cref="T:Starcounter.Server.PublicModel.TaskDuration"> duration
            of the task</see></param>
        </member>
        <member name="M:Starcounter.Server.Commands.CommandTask.#ctor(System.Int32,System.String,Starcounter.Server.PublicModel.TaskDuration,System.String)">
            <summary>
            Initializes a <see cref="T:Starcounter.Server.Commands.CommandTask"/>
            </summary>
            <param name="id">The identity to use.</param>
            <param name="shortText">A short textual description of the task</param>
            <param name="duration">The expected <see cref="T:Starcounter.Server.PublicModel.TaskDuration"> duration
            of the task</see></param>
            <param name="description">A longer descritopn of the task.</param>
        </member>
        <member name="T:Starcounter.Server.Commands.StopExecutableCommandProcessor">
            <summary>
            Executes a queued and dispatched <see cref="T:Starcounter.Server.PublicModel.Commands.StopExecutableCommand"/>.
            </summary>
        </member>
        <member name="M:Starcounter.Server.Commands.StopExecutableCommandProcessor.#ctor(Starcounter.Server.ServerEngine,Starcounter.Server.PublicModel.Commands.ServerCommand)">
            <summary>
            Initializes a new <see cref="T:Starcounter.Server.Commands.StopExecutableCommandProcessor"/>.
            </summary>
            <param name="server">The server in which the processor executes.</param>
            <param name="command">The <see cref="T:Starcounter.Server.PublicModel.Commands.StopExecutableCommand"/> the
            processor should exeucte.</param>
        </member>
        <member name="M:Starcounter.Server.Commands.StopExecutableCommandProcessor.Execute">
            <inheritdoc />
        </member>
        <member name="T:Starcounter.Server.Commands.ErrorInfoException">
            <summary>
            Exception wrapping an array of <see cref="T:Starcounter.Server.PublicModel.ErrorInfo"/>.
            </summary>
            <remarks>
            This exception is typically thrown by a concrete <see cref="T:Starcounter.Server.Commands.CommandProcessor"/>
            as a convenient way to throw an exception stemming from <see cref="T:Starcounter.Server.PublicModel.ErrorInfo"/>.
            This exception is then typically immediately handled and the array of <see cref="T:Starcounter.Server.PublicModel.ErrorInfo"/>
            is unwrapped. Therefore, this exception never gets into user code and its message is never displayed.
            </remarks>
        </member>
        <member name="M:Starcounter.Server.Commands.ErrorInfoException.#ctor(Starcounter.Server.PublicModel.ErrorInfo[])">
            <summary>
            Initializes a new <see cref="T:Starcounter.Server.Commands.ErrorInfoException"/>.
            </summary>
            <param name="errorInfo">The array of <see cref="T:Starcounter.Server.PublicModel.ErrorInfo"/> to wrap.</param>
        </member>
        <member name="M:Starcounter.Server.Commands.ErrorInfoException.#ctor(Starcounter.Server.PublicModel.ErrorInfo)">
            <summary>
            Initializes a new <see cref="T:Starcounter.Server.Commands.ErrorInfoException"/>.
            </summary>
            <param name="errorInfo">A single error info that will be stored in
            the <see cref="T:Starcounter.Server.PublicModel.ErrorInfo"/> array wrapped.</param>
        </member>
        <member name="M:Starcounter.Server.Commands.ErrorInfoException.GetErrorInfo">
            <summary>
            Gets the wrapped array of <see cref="T:Starcounter.Server.PublicModel.ErrorInfo"/>.
            </summary>
            <returns>The wrapped array of <see cref="T:Starcounter.Server.PublicModel.ErrorInfo"/></returns>
        </member>
        <member name="T:Starcounter.Server.Compiler.AppCompiler">
            <summary>
            Compiler that allows programmatic compilation of Starcounter
            apps.
            </summary>
        </member>
        <member name="P:Starcounter.Server.Compiler.AppCompiler.Name">
            <summary>
            Gets or sets the name to use for the compiled application.
            </summary>
        </member>
        <member name="P:Starcounter.Server.Compiler.AppCompiler.TargetPath">
            <summary>
            Gets or sets the target assembly path. If specified before
            the app is compiled, the compiler will emit the assembly to
            this path, and remove any temporary artifacts.
            </summary>
        </member>
        <member name="F:Starcounter.Server.Compiler.AppCompiler.SourceFiles">
            <summary>
            Holds source files that should be included in the compilation.
            </summary>
        </member>
        <member name="F:Starcounter.Server.Compiler.AppCompiler.SourceCode">
            <summary>
            Holds a set of source code strings that should be included in
            the compilation.
            </summary>
        </member>
        <member name="F:Starcounter.Server.Compiler.AppCompiler.MetadataReferences">
            <summary>
            List of references that will be used to compile the application.
            </summary>
        </member>
        <member name="M:Starcounter.Server.Compiler.AppCompiler.#ctor(System.String)">
            <summary>
            Initialize a new <see cref="T:Starcounter.Server.Compiler.AppCompiler"/> instance.
            </summary>
        </member>
        <member name="M:Starcounter.Server.Compiler.AppCompiler.Compile">
            <summary>
            Compiles the included source code into an application.
            </summary>
        </member>
        <member name="T:Starcounter.Server.Compiler.AppCompilerError">
            <summary>
            Errors related to compiling with an <see cref="T:Starcounter.Server.Compiler.AppCompiler"/>.
            </summary>
        </member>
        <member name="F:Starcounter.Server.Compiler.AppCompilerError.NoSourceSpecified">
            <summary>
            The compiler was given no source to compile.
            </summary>
        </member>
        <member name="F:Starcounter.Server.Compiler.AppCompilerError.ErrorsCompiling">
            <summary>
            The underlying compiler failed to compile inputs.
            </summary>
        </member>
        <member name="T:Starcounter.Server.Compiler.AppCompilerException">
            <summary>
            Exception specific to <see cref="T:Starcounter.Server.Compiler.AppCompiler"/> errors.
            </summary>
        </member>
        <member name="F:Starcounter.Server.Compiler.AppCompilerException.Error">
            <summary>
            Gets the specific error.
            </summary>
        </member>
        <member name="P:Starcounter.Server.Compiler.AppCompilerException.CompilerErrors">
            <summary>
            Gets errors from the underlying compiler, or an empty enumerator
            if there are none.
            </summary>
        </member>
        <member name="P:Starcounter.Server.Compiler.AppCompilerException.HasCompilerErrors">
            <summary>
            Gets a value indicating if the current exception carries any
            compiler errors.
            </summary>
        </member>
        <member name="M:Starcounter.Server.Compiler.AppCompilerException.#ctor(Starcounter.Server.Compiler.AppCompilerError)">
            <summary>
            Initialize a new exception from an error.
            </summary>
            <param name="error">The specified error</param>
        </member>
        <member name="M:Starcounter.Server.Compiler.AppCompilerException.#ctor(System.CodeDom.Compiler.CompilerResults)">
            <summary>
            Initialize a new exception from an error and a compiler
            result.
            </summary>
            <param name="result">Results from underlying compiler.</param>
        </member>
        <member name="T:Starcounter.Server.Compiler.AppCompilerExtensions">
            <summary>
            Convienence methods extending the <c>AppCompiler</c>.
            </summary>
        </member>
        <member name="T:Starcounter.Server.Compiler.AppCompilerResult">
            <summary>
            Define the result of <c>AppCompiler.Compile()</c>.
            </summary>
        </member>
        <member name="P:Starcounter.Server.Compiler.AppCompilerResult.OutputDirectory">
            <summary>
            Full path to directory where the compiled app reside.
            </summary>
        </member>
        <member name="P:Starcounter.Server.Compiler.AppCompilerResult.ApplicationPath">
            <summary>
            Full path to the compiled application executable.
            </summary>
        </member>
        <member name="P:Starcounter.Server.Compiler.AppCompilerResult.SymbolFilePath">
            <summary>
            Full path to the application symbol file.
            </summary>
        </member>
        <member name="T:Starcounter.Server.Compiler.CodeDomAppCompilerError">
            <summary>
            Exposed a CodeDom based <c>CompilerError</c> as an
            <c>IAppCompilerSourceError</c>.
            </summary>
        </member>
        <member name="T:Starcounter.Server.Compiler.IAppCompilerSourceError">
            <summary>
            Defines an error raised by the underlying compiler when
            trying to compile an application.
            </summary>
        </member>
        <member name="P:Starcounter.Server.Compiler.IAppCompilerSourceError.Id">
            <summary>
            Gets the error identity.
            </summary>
        </member>
        <member name="P:Starcounter.Server.Compiler.IAppCompilerSourceError.Description">
            <summary>
            Gets the error description.
            </summary>
        </member>
        <member name="P:Starcounter.Server.Compiler.IAppCompilerSourceError.File">
            <summary>
            Gets the file the error stem from, if applicable.
            </summary>
        </member>
        <member name="P:Starcounter.Server.Compiler.IAppCompilerSourceError.Line">
            <summary>
            Gets the file line the error stem from, if applicable.
            </summary>
        </member>
        <member name="P:Starcounter.Server.Compiler.IAppCompilerSourceError.Column">
            <summary>
            Gets the file column the error stem from, if applicable.
            </summary>
        </member>
        <member name="T:Starcounter.Server.DatabaseEngineMonitor">
            <summary>
            Governs the monitoring and reacting to database engine processes
            that exit.
            </summary>
        </member>
        <member name="F:Starcounter.Server.DatabaseEngineMonitor.Server">
            <summary>
            Gets the server that has instantiated this monitor.
            </summary>
        </member>
        <member name="P:Starcounter.Server.DatabaseEngineMonitor.Log">
            <summary>
            Gets the log source used by this component when logging.
            </summary>
        </member>
        <member name="M:Starcounter.Server.DatabaseEngineMonitor.#ctor(Starcounter.Server.ServerEngine)">
            <summary>
            Initializes a <see cref="T:Starcounter.Server.DatabaseEngineMonitor"/> for the given
            <see cref="T:Starcounter.Server.ServerEngine"/>.
            </summary>
            <param name="server">The server engine.</param>
        </member>
        <member name="M:Starcounter.Server.DatabaseEngineMonitor.Setup">
            <summary>
            Performs setup of the current <see cref="T:Starcounter.Server.DatabaseEngineMonitor"/>.
            </summary>
        </member>
        <member name="M:Starcounter.Server.DatabaseEngineMonitor.BeginMonitoring(Starcounter.Server.Database,System.Diagnostics.Process)">
            <summary>
            Instructs this monitor to begin monitoring <paramref name="engineProc"/>
            part of the engine running <see cref="!:database"/>.
            </summary>
            <param name="database">The database the given engine process represent.</param>
            <param name="engineProc">The process to begin monitoring.</param>
        </member>
        <member name="T:Starcounter.Server.DatabaseHostingService">
            <summary>
            Implements the functionality used by the server to interact with
            the the database host.
            </summary>
        </member>
        <member name="F:Starcounter.Server.DatabaseHostingService.engine">
            <summary>
            Gets the server that has instantiated this service.
            </summary>
        </member>
        <member name="M:Starcounter.Server.DatabaseHostingService.#ctor(Starcounter.Server.ServerEngine)">
            <summary>
            Initializes a new instance of the <see cref="T:Starcounter.Server.DatabaseHostingService"/>
            class.
            </summary>
            <param name="engine">The <see cref="T:Starcounter.Server.ServerEngine"/> in which the
            service will live.</param>
        </member>
        <member name="M:Starcounter.Server.DatabaseHostingService.Setup">
            <summary>
            Executes setup of the current <see cref="T:Starcounter.Server.DatabaseHostingService"/>.
            </summary>
        </member>
        <member name="T:Starcounter.Server.DatabaseSetup">
            <summary>
            Implements the core setup / database creation service, utilized
            by components (such as command processors) that need to create
            databases.
            </summary>
        </member>
        <member name="F:Starcounter.Server.DatabaseSetup.Engine">
            <summary>
            Gets the <see cref="T:Starcounter.Server.ServerEngine"/> whose repository we are
            targeting.
            </summary>
        </member>
        <member name="F:Starcounter.Server.DatabaseSetup.SetupProperties">
            <summary>
            Gets the <see cref="T:Starcounter.Server.DatabaseSetupProperties"/> that will be
            used when this setup executes.
            </summary>
        </member>
        <member name="M:Starcounter.Server.DatabaseSetup.#ctor(Starcounter.Server.ServerEngine,Starcounter.Server.DatabaseSetupProperties)">
            <summary>
            Initializes a new <see cref="T:Starcounter.Server.DatabaseSetup"/>.
            </summary>
            <param name="engine"></param>
            <param name="properties"></param>
        </member>
        <member name="M:Starcounter.Server.DatabaseSetup.CreateFiles">
            <summary>
            Executes the given <see cref="T:Starcounter.Server.DatabaseSetup"/> as it has
            been configured, creating all files (configuration + storage
            files) needed to represent a database under a certain server.
            </summary>
            <remarks>
            When a <see cref="T:Starcounter.Server.DatabaseSetup"/> is executed, it expects
            all configuration values to be present and neither any defaults
            are applied/used nor is any checking/validation of configuration
            done.
            <para>
            The database created is NOT materialized as a server side domain
            object, only a proper file setup is created. Materializing the
            database domain object, and eventually making it part of the server
            runtime, is the responsability of the caller, or can be achieved
            by using <see cref="M:Starcounter.Server.DatabaseSetup.CreateDatabase"/>.
            </para>
            </remarks>
            <returns>
            The full path to the database configuration file of the database
            that was just created.
            </returns>
        </member>
        <member name="M:Starcounter.Server.DatabaseSetup.CreateDatabase">
            <summary>
            Creates a database, including all its dependent files (i.e. it's
            configuration and storage files).
            </summary>
            <returns>A <see cref="T:Starcounter.Server.Database"/> representing the newly created
            database.</returns>
        </member>
        <member name="T:Starcounter.Server.DatabaseSetupProperties">
            <summary>
            Class DatabaseSetupProperties
            </summary>
        </member>
        <member name="F:Starcounter.Server.DatabaseSetupProperties.Name">
            <summary>
            Gets the name of the database to which the current
            property set applies.
            </summary>
        </member>
        <member name="F:Starcounter.Server.DatabaseSetupProperties.Key">
            <summary>
            Gets the key used by the server when resolving and creating
            the image- and log directories respectively.
            </summary>
        </member>
        <member name="F:Starcounter.Server.DatabaseSetupProperties.Configuration">
            <summary>
            Gets the resolved management configuration of the database
            to which the current property set applies.
            </summary>
        </member>
        <member name="F:Starcounter.Server.DatabaseSetupProperties.StorageConfiguration">
            <summary>
            Gets the database storage configuration of the database
            to which the current property set applies.
            </summary>
        </member>
        <member name="M:Starcounter.Server.DatabaseSetupProperties.#ctor(Starcounter.Server.ServerEngine,System.String)">
            <summary>
            Initializes a <see cref="T:Starcounter.Server.DatabaseSetupProperties"/> instance.
            </summary>
            <param name="engine">The engine from which default configuration
            should be fetched.</param>
            <param name="databaseName">The name of the database the current
            <see cref="T:Starcounter.Server.DatabaseSetupProperties"/> are to reprsent.</param>
        </member>
        <member name="M:Starcounter.Server.DatabaseSetupProperties.MakeFinal">
            <summary>
            Wraps up the editing of the current database setup properties,
            applying values enforced by the server library.
            </summary>
        </member>
        <member name="T:Starcounter.Server.DatabaseStorageService">
            <summary>
            Exposes a set of methods that can be used to easily work with
            database storages, i.e. sets of image- and transaction log files.
            </summary>
        </member>
        <member name="M:Starcounter.Server.DatabaseStorageService.#ctor(Starcounter.Server.ServerEngine)">
            <summary>
            Intializes a new <see cref="T:Starcounter.Server.DatabaseStorageService"/>.
            </summary>
            <param name="engine">The engine in which the current service
            runs.</param>
        </member>
        <member name="M:Starcounter.Server.DatabaseStorageService.Setup">
            <summary>
            Executes setup of the <see cref="T:Starcounter.Server.DatabaseStorageService"/>.
            </summary>
        </member>
        <member name="M:Starcounter.Server.DatabaseStorageService.NewKey">
            <summary>
            Creates a key that the server can use when creating and deleting
            database files and folders to assure they are unique.
            </summary>
            <returns>An opaque key to use in the form of a string.</returns>
        </member>
        <member name="M:Starcounter.Server.DatabaseStorageService.NewNamedKey(System.String)">
            <summary>
            Creates a key that the server can use when creating and deleting
            database files and folders to assure they are unique, including
            the name of the database.
            </summary>
            <param name="databaseName">The name of the database to be included
            in the generated key.</param>
            <returns>An opaque key to use in the form of a string.</returns>
        </member>
        <member name="M:Starcounter.Server.DatabaseStorageService.IsNamedKeyDirectory(System.String,System.String,System.String)">
            <summary>
            Checks if the given directory (optinally part of a path) is considered
            named with a specified named key combination.
            </summary>
            <param name="directory">The directory to consult.</param>
            <param name="database">The database name in the named key.</param>
            <param name="key">The unique, opaque key part of the named key.</param>
            <returns>True if the directory match the named key; false otherwise.</returns>
        </member>
        <member name="M:Starcounter.Server.DatabaseStorageService.CreateStorage(System.String,System.String,Starcounter.Advanced.Configuration.DatabaseStorageConfiguration)">
            <summary>
            Creates a new storage for with the given values.
            </summary>
            <param name="name">The name of database to create a new storage for.</param>
            <param name="imagePath">The path to where image files should be created.</param>
            <param name="logPath">The path to where transaction logs should be created.</param>
            <param name="configuration">The <see cref="T:Starcounter.Advanced.Configuration.DatabaseStorageConfiguration"/> to use
            </param>
        </member>
        <member name="T:Starcounter.Server.DeletedDatabaseFile">
            <summary>
            Encapsulates the logic and conventions used by the server library
            when deleting databases (via renaming of database configuration files
            and subsequent physical removal of said files and, optionally, the
            database data files the reference).
            </summary>
        </member>
        <member name="F:Starcounter.Server.DeletedDatabaseFile.DeletedFilesPattern">
            <summary>
            The file pattern used by the server to find database files that
            have been marked deleted/removed.
            </summary>
        </member>
        <member name="T:Starcounter.Server.DeletedDatabaseFile.Kind">
            <summary>
            The kind of deletes supported by the server library.
            </summary>
        </member>
        <member name="F:Starcounter.Server.DeletedDatabaseFile.Kind.Removed">
            <summary>
            The database is deleted in the sence that it is no
            longer made visible in the public server model, but
            no data is ever deleted (including configuration).
            </summary>
        </member>
        <member name="F:Starcounter.Server.DeletedDatabaseFile.Kind.Deleted">
            <summary>
            Extends <see cref="F:Starcounter.Server.DeletedDatabaseFile.Kind.Removed"/>
            by having the configuration and temporary data deleted,
            but not database image- and log files.
            </summary>
        </member>
        <member name="F:Starcounter.Server.DeletedDatabaseFile.Kind.DeletedFully">
            <summary>
            Extends <see cref="F:Starcounter.Server.DeletedDatabaseFile.Kind.Deleted"/>
            by having image- and log files deleted.
            </summary>
        </member>
        <member name="F:Starcounter.Server.DeletedDatabaseFile.Kind.Unsupported">
            <summary>
            Denotes the kind of delete is not supported or
            recognized.
            </summary>
        </member>
        <member name="M:Starcounter.Server.DeletedDatabaseFile.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Starcounter.Server.DeletedDatabaseFile"/> based
            on the given path to a file previously marked as deleted.
            </summary>
            <param name="file">Full path to a file previously marked
            deleted.</param>
        </member>
        <member name="T:Starcounter.Server.ExecutableService">
            <summary>
            Provides services for executables to the server implementation.
            </summary>
        </member>
        <member name="M:Starcounter.Server.ExecutableService.#ctor(Starcounter.Server.ServerEngine)">
            <summary>
            Initializes a <see cref="T:Starcounter.Server.ExecutableService"/>.
            </summary>
            <param name="engine">The <see cref="T:Starcounter.Server.ServerEngine"/> under which
            this service will run.</param>
        </member>
        <member name="M:Starcounter.Server.ExecutableService.Setup">
            <summary>
            Executes setup of <see cref="T:Starcounter.Server.ExecutableService"/>.
            </summary>
        </member>
        <member name="M:Starcounter.Server.ExecutableService.CreateKey(System.String)">
            <summary>
            Generates a unique key for the given executable, based on it's path.
            </summary>
            <param name="executablePath">Full path to the executable whose key
            should be generated.</param>
            <returns>A unique key from <paramref name="executablePath"/>.</returns>
        </member>
        <member name="T:Starcounter.Server.GatewayService">
            <summary>
            Encapsulates the starting and stopping of the Starcounter
            gateway process.
            </summary>
        </member>
        <member name="M:Starcounter.Server.GatewayService.#ctor(Starcounter.Server.ServerEngine)">
            <summary>
            Initializes a new <see cref="T:Starcounter.Server.GatewayService"/> running as part
            of the given server engine.
            </summary>
            <param name="engine">The <see cref="T:Starcounter.Server.ServerEngine"/> under which
            the gateway service runs.</param>
        </member>
        <member name="M:Starcounter.Server.GatewayService.Setup">
            <summary>
            Executes setup of the current <see cref="T:Starcounter.Server.GatewayService"/> when
            running as part of a server.
            </summary>
        </member>
        <member name="M:Starcounter.Server.GatewayService.UnregisterCodehost(System.String)">
            <summary>
            Unregisters existing codehost.
            </summary>
        </member>
        <member name="T:Starcounter.Server.WeaverService">
            <summary>
            Encapsulates the services provided by the Starcounter weaver.
            </summary>
        </member>
        <member name="M:Starcounter.Server.WeaverService.#ctor(Starcounter.Server.ServerEngine)">
            <summary>
            Initializes a <see cref="T:Starcounter.Server.WeaverService"/>.
            </summary>
            <param name="engine">The <see cref="T:Starcounter.Server.ServerEngine"/> under which
            the weaver will run.</param>
        </member>
        <member name="M:Starcounter.Server.WeaverService.Setup">
            <summary>
            Executes setup of <see cref="T:Starcounter.Server.WeaverService"/>.
            </summary>
        </member>
        <member name="M:Starcounter.Server.WeaverService.CreateFullRuntimePath(System.String,System.String)">
            <summary>
            Generates the full directory path where the server should run the
            application represented by the assembly <paramref name="assemblyPath"/>
            from.
            </summary>
            <param name="baseDirectory">Full path of the directory the server use
            as the base directory when weaving code.</param>
            <param name="assemblyPath">Full path to an assembly that are to be
            prepared for the host, i.e. about to be weaved.</param>
            <returns>A unique subpath of <paramref name="baseDirectory"/> that
            should be used by the server to prepare and run the application
            represented by the assembly <paramref name="assemblyPath"/>.</returns>
            <example>
            var dir = weaver.CreateFullRuntimePath(
                @"C:\Server\Code",
                @"C:\My Projects\My First Application\MyApp.exe"
            );
            
            // The below line will output
            //   "C:\Server\Code\myapp.exe-6D189D915AE238F5FA029AE0FBFD0F744113FC2E"
            // where the hexadecimal number uniquely identifies the full path specified
            // as the second parameter.
            Console.WriteLine(dir);
            </example>
        </member>
        <member name="M:Starcounter.Server.WeaverService.Weave(System.String,System.String,System.Boolean)">
            <summary>
            Weaves an assembly and all it's references.
            </summary>
            <param name="givenAssembly">The path to the original assembly file,
            normally corresponding to the path of a starting App executable.
            </param>
            <param name="runtimeDirectory">The runtime directory to where the
            weaved result should be stored. This directory can possibly include
            cached (and up-to-date) assemblies weaved from previous rounds.
            </param>
            <param name="disableEditionLibraries">Should edition libraries directory
            be used to load assemblies from there.
            </param>
            <returns>The full path to the corresponding, weaved assembly.</returns>
        </member>
        <member name="T:Starcounter.Server.DatabaseApplication">
            <summary>
            Represents an application as it relates to a <see cref="T:Starcounter.Server.Database"/>
            under a given server.
            </summary>
        </member>
        <member name="F:Starcounter.Server.DatabaseApplication.Info">
            <summary>
            Holds the application information for the current database
            application, as kept by the server engine.
            </summary>
        </member>
        <member name="M:Starcounter.Server.DatabaseApplication.#ctor(Starcounter.Server.PublicModel.AppInfo)">
            <summary>
            Initialize a new <see cref="T:Starcounter.Server.DatabaseApplication"/> based
            on the given application information.
            </summary>
            <param name="info"></param>
        </member>
        <member name="P:Starcounter.Server.DatabaseApplication.IsStartedWithAsyncEntrypoint">
            <summary>
            Gets or sets a value indicating if the current application was,
            or will be, started with its entrypoint being invoked asynchronously.
            </summary>
            <remarks>
            <para>The default is <c>false</c>. Normally, the entrypoint of any
            application is run in a synchronous fashion.</para>
            <para>If the application doesn't define an entrypoint - for example,
            it's represented by a library or just some code file with a few
            classes - this property is silently ignored.</para>
            </remarks>
        </member>
        <member name="P:Starcounter.Server.DatabaseApplication.IsStartedWithTransactEntrypoint">
            <summary>
            Gets or sets a value indicating if the current application was,
            or will be, started with its entrypoint being invoked within the
            scope of a write transaction.
            </summary>
        </member>
        <member name="M:Starcounter.Server.DatabaseApplication.ToPublicModel">
            <summary>
            Creates a snapshot of this <see cref="T:Starcounter.Server.DatabaseApplication"/> in the
            form of a public model <see cref="T:Starcounter.Server.PublicModel.AppInfo"/>.
            </summary>
            <returns>An <see cref="T:Starcounter.Server.PublicModel.AppInfo"/> representing the current state
            of this executable.</returns>
        </member>
        <member name="M:Starcounter.Server.DatabaseApplication.ToExecutable">
            <summary>
            Creates an <see cref="T:Starcounter.Bootstrap.Management.Representations.JSON.Executable"/> instance based on the
            properties of the current <see cref="T:Starcounter.Server.DatabaseApplication"/>.
            </summary>
            <returns>An <see cref="T:Starcounter.Bootstrap.Management.Representations.JSON.Executable"/> representing the same
            application as the current instance.</returns>
        </member>
        <member name="T:Starcounter.Server.ImageFile">
            <summary>
            Represents a logical database image file.
            </summary>
            <remarks>
            Starcounter secure data in image files, normally
            two files per database. One contains the latest secured
            checkpoint, the other one the upcoming checkpoint.
            </remarks>
        </member>
        <member name="P:Starcounter.Server.ImageFile.Version">
            <summary>
            Gets the version of the current image file.
            </summary>
        </member>
        <member name="M:Starcounter.Server.ImageFile.Read(System.String,System.String)">
            <summary>
            Reads the logical image file of the database with the
            given name, looking for it in the given directory.
            </summary>
            <param name="directory">The directory where the database
            image(s) are located.</param>
            <param name="databaseName">The name of the database.</param>
            <returns>An <see cref="T:Starcounter.Server.ImageFile"/> representing the logical
            image file of the given database.</returns>
        </member>
        <member name="M:Starcounter.Server.ImageFile.GetRuntimeImageVersion">
            <summary>
            Gets current image version as expected by the runtime of the
            current installation.
            </summary>
            <returns>The image version of the current runtime.</returns>
        </member>
        <member name="T:Starcounter.Server.ClientContext">
            <summary>
            Provides information about the calling client context.
            </summary>
        </member>
        <member name="F:Starcounter.Server.ClientContext.Id">
            <summary>
            The well-known identity of the current context.
            </summary>
        </member>
        <member name="F:Starcounter.Server.ClientContext.PID">
            <summary>
            The process ID of the current context.
            </summary>
        </member>
        <member name="F:Starcounter.Server.ClientContext.Program">
            <summary>
            The logical application the current context runs under.
            </summary>
        </member>
        <member name="F:Starcounter.Server.ClientContext.User">
            <summary>
            The user the current context runs under.
            </summary>
        </member>
        <member name="F:Starcounter.Server.ClientContext.Machine">
            <summary>
            The machine the current context runs under.
            </summary>
        </member>
        <member name="P:Starcounter.Server.ClientContext.Current">
            <summary>
            The current context. Set by client applications, via
            <see cref="M:Starcounter.Server.ClientContext.InitCurrent(System.String)"/>.
            </summary>
        </member>
        <member name="M:Starcounter.Server.ClientContext.InitCurrent(System.String)">
            <summary>
            Initialize the current <see cref="T:Starcounter.Server.ClientContext"/> and return
            a reference to it.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Server.ClientContext.GetCurrentContextInfo">
            <summary>
            Creates a string containing the current client context
            information, including information about the current client
            and the user.
            </summary>
            <returns>A string representing the current context.</returns>
        </member>
        <member name="M:Starcounter.Server.ClientContext.ParseHostInfo(System.String,System.String@,System.Int32@)">
            <summary>
            Parses the given client context information string (previously
            created with <see cref="M:Starcounter.Server.ClientContext.GetCurrentContextInfo"/>
            and extracts the information it contains about the host, i.e.
            the logical identity and the process ID.
            </summary>
            <param name="clientContextInfo">The context info to parse.</param>
            <param name="id">The logical host identity.</param>
            <param name="pid">The host process id.</param>
        </member>
        <member name="T:Starcounter.Server.KnownClientContexts">
            <summary>
            Enum-like class with constants of known management
            client contexts.
            </summary>
        </member>
        <member name="F:Starcounter.Server.KnownClientContexts.VisualStudio">
            <summary>
            Visual Studio context.
            </summary>
        </member>
        <member name="F:Starcounter.Server.KnownClientContexts.Star">
            <summary>
            The star.exe context.
            </summary>
        </member>
        <member name="F:Starcounter.Server.KnownClientContexts.StarAdmin">
            <summary>
            The staradmin.exe context.
            </summary>
        </member>
        <member name="F:Starcounter.Server.KnownClientContexts.Admin">
            <summary>
            Context of the administration server.
            </summary>
        </member>
        <member name="F:Starcounter.Server.KnownClientContexts.UnknownContext">
            <summary>
            Used when the context is unknown.
            </summary>
        </member>
        <member name="M:Starcounter.Server.KnownClientContexts.ParseFromContextInfo(System.String)">
            <summary>
            Extracts the known context identifier from the given
            contextInfo string (previously produced by 
            ClientContext.GetCurrentContextInfo).
            </summary>
            <param name="contextInfo">The context info string to parse.</param>
            <returns>The context identifier</returns>
        </member>
        <member name="T:Starcounter.Server.Service.ServerService">
            <summary>
            Expose a set of methods that is used to manage the Starcounter
            service when installed as a platform service on a given OS.
            </summary>
        </member>
        <member name="F:Starcounter.Server.Service.ServerService.Name">
            <summary>
            Gets the name we use for the configured service.
            </summary>
        </member>
        <member name="M:Starcounter.Server.Service.ServerService.IsServerService(System.ServiceProcess.ServiceController)">
            <summary>
            Gets a value indicating if <paramref name="service"/> represents
            the configuration of a Starcounter server service.
            </summary>
            <param name="service">
            The service to check.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="service"/> is identified
            as a configured system service, <see langword="false"/> if not.
            </returns>
        </member>
        <member name="M:Starcounter.Server.Service.ServerService.Find(System.String)">
            <summary>
            
            </summary>
            <param name="serviceName"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Server.Service.ServerService.Create(System.IntPtr,System.String,System.String,System.String,Starcounter.Server.Windows.StartupType,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a Starcounter server service using the supplied parameters
            and internal knowledge.
            </summary>
            <param name="serviceManagerHandle">Handle to the service manager. Must
            be opened with the privilege to create new services in the service
            database.</param>
            <param name="displayName">The display name to use. Pass <see langword="null"/>
            to use the default display name.</param>
            <param name="serviceName">The name of the service to create.</param>
            <param name="description">A text describing the functionality of the
            service. Pass <see langword="null"/> to use the default description.
            </param>
            <param name="startupType">The startup type of the service.</param>
            <param name="commandLine">The command line of the service, referencing the
            Starcounter server executable and the arguments to pass to it.</param>
            <param name="user">The user under which the service should run. Pass 
            <see langword="null"/> to install under "LocalSystem".</param>
            <param name="password">The password to use by the system when logging on
            as the given <paramref name="user"/>.</param>
            <param name="tryDifferentNames">An optional parameters specifying that
            the methods should try with a prefix on the service name if creation
            fails because a service with the same name already exist.</param>
            <returns>The service name of the created service.</returns>
        </member>
        <member name="M:Starcounter.Server.Service.ServerService.Delete(System.String)">
            <summary>
            Deletes a Starcounter server service (removing it from the registry)
            given it's service name.
            </summary>
            <param name="serviceName">Name of the service to delete.</param>
        </member>
        <member name="M:Starcounter.Server.Service.ServerService.Start(System.String,System.Int32)">
            <summary>
            Starts the Starcounter server service.
            </summary>
            <param name="serviceName">The name of the service.</param>
            <param name="millisecondsTimeout">Optional timeout to wait for it to become running.</param>
        </member>
        <member name="M:Starcounter.Server.Service.ServerService.Stop(System.String,System.Int32)">
            <summary>
            Stops the Starcounter server service.
            </summary>
            <param name="serviceName">The name of the service.</param>
            <param name="millisecondsTimeout">Optional timeout to wait for it to stop.</param>
        </member>
        <member name="M:Starcounter.Server.Service.ServerService.Delete(System.ServiceProcess.ServiceController)">
            <summary>
            Deletes a Starcounter server service (removing it from the registry)
            given a reference to a <see cref="T:System.ServiceProcess.ServiceController"/> referencing it.
            </summary>
            <param name="service">A <see cref="T:System.ServiceProcess.ServiceController"/> referencing
            the service to delete.</param>
        </member>
        <member name="M:Starcounter.Server.Service.ServerService.Delete(System.IntPtr,System.String)">
            <summary>
            Deletes a Starcounter server service (removing it from the registry)
            given it's service name.
            </summary>
            <param name="serviceManagerHandle">A handle to the service manager.
            The manager handle must be opened with the permission to change the
            service configuration (i.e. SERVICE_ACCESS.SERVICE_CHANGE_CONFIG).
            </param>
            <param name="serviceName">Name of the service to delete.</param>
        </member>
        <member name="M:Starcounter.Server.Service.ServerService.Delete(System.IntPtr,System.ServiceProcess.ServiceController)">
            <summary>
            Deletes a Starcounter server service (removing it from the registry)
            given a reference to a <see cref="T:System.ServiceProcess.ServiceController"/> referencing it.
            </summary>
            <param name="serviceManagerHandle">A handle to the service manager.
            The manager handle must be opened with the permission to change the
            service configuration (i.e. SERVICE_ACCESS.SERVICE_CHANGE_CONFIG).
            </param>
            <param name="service">A <see cref="T:System.ServiceProcess.ServiceController"/> referencing
            the service to delete.</param>
        </member>
        <member name="T:Starcounter.Server.Setup.ServerServiceSetup">
            <summary>
            Expose the set of properties applicable when installing the
            Starcounter server platform service and a method to execute 
            the setup.
            </summary>
        </member>
        <member name="P:Starcounter.Server.Setup.ServerServiceSetup.InstallationPath">
            <summary>
            Gets or sets the Starcounter installation path, needed
            to properly resolve the binaries.
            </summary>
        </member>
        <member name="P:Starcounter.Server.Setup.ServerServiceSetup.ServiceName">
            <summary>
            Gets or sets the service name to use.
            </summary>
        </member>
        <member name="P:Starcounter.Server.Setup.ServerServiceSetup.DisplayName">
            <summary>
            Gets or sets the service display name to use.
            </summary>
        </member>
        <member name="P:Starcounter.Server.Setup.ServerServiceSetup.Description">
            <summary>
            Gets or sets the service description to use.
            </summary>
        </member>
        <member name="P:Starcounter.Server.Setup.ServerServiceSetup.StartupType">
            <summary>
            Gets or sets the service startup type to use.
            </summary>
        </member>
        <member name="P:Starcounter.Server.Setup.ServerServiceSetup.AccountName">
            <summary>
            Gets or sets the account name under which the
            service should run / log in as.
            </summary>
        </member>
        <member name="P:Starcounter.Server.Setup.ServerServiceSetup.Password">
            <summary>
            Gets or sets the password to use when the service
            needs to log in as <see cref="P:Starcounter.Server.Setup.ServerServiceSetup.AccountName"/>.
            </summary>
        </member>
        <member name="M:Starcounter.Server.Setup.ServerServiceSetup.#ctor">
            <summary>
            Initializes an instance of <see cref="T:Starcounter.Server.Setup.ServerServiceSetup"/> with
            all default values.
            </summary>
        </member>
        <member name="M:Starcounter.Server.Setup.ServerServiceSetup.Execute">
            <summary>
            Executes the setup, i.e. installing the system server service
            using the specified attributes of the current instance.
            </summary>
            <returns>The service name of the installed service.</returns>
        </member>
        <member name="T:Starcounter.Server.Setup.RepositorySetup">
             <summary>
             Represents the process of creating a new repository.
             </summary>
             <example>
             This sample shows the intended use of the <see cref="T:Starcounter.Server.Setup.RepositorySetup"/> class.
             <code>
             class Program
             {
                 public static void Main(string[] args)
                 {
                     RepositorySetup setup;
            
                     // Normally, let the user choose some directory to create the
                     // new repository in. In this case, we assume the user has specified
                     // a directory MyServers\MyServer. We use that value to initialize
                     // the setup structure.
            
                     setup = RepositorySetup.NewDefault(@"C:\MyServers\MyServer", "Personal");
            
                     // Display some GUI/wizard that allows the user to modify
                     // all default values as suggested by the NewDefault method.
                     // No modification to the disk has yet occured.
            
                     CreateRepositoryWizard.Show(setup);
            
                     // Now create the disk structure and the configuration files
                     // after the wizard has terminated.
            
                     try {
                         setup.Execute();
                     }
                     catch (Exception) { ... }
                 }
             }
             </code>
             </example>
        </member>
        <member name="F:Starcounter.Server.Setup.RepositorySetup.Structure">
            <summary>
            The <see cref="T:Starcounter.Server.Setup.RepositoryStructure"/> to use.
            </summary>
        </member>
        <member name="F:Starcounter.Server.Setup.RepositorySetup.ServerConfiguration">
            <summary>
            The <see cref="F:Starcounter.Server.Setup.RepositorySetup.ServerConfiguration">server configuration</see> to use.
            </summary>
        </member>
        <member name="M:Starcounter.Server.Setup.RepositorySetup.NewDefault(System.String,System.String)">
            <summary>
            Creates a new default setup based on a directory and a name.
            </summary>
            <param name="repositoryParentPath">
            Directory in where the new repository should be created.</param>
            <param name="name">Name of the new repository.</param>
            <returns>A <see cref="T:Starcounter.Server.Setup.RepositorySetup"/> representing the
            setup of the given values.</returns>
        </member>
        <member name="M:Starcounter.Server.Setup.RepositorySetup.NewDefault(System.String,System.Int32)">
            <summary>
            Creates a new default setup based on a directory repository directory.
            </summary>
            <param name="repositoryPath">The directory that makes up the root of the
            repository created. The name of the repository is fetched from the last
            part of the given path.</param>
            <param name="serverPortRange">The server port range.</param>
            <returns>A <see cref="T:Starcounter.Server.Setup.RepositorySetup" /> representing the
            setup of the given value.</returns>
        </member>
        <member name="M:Starcounter.Server.Setup.RepositorySetup.#ctor(Starcounter.Server.Setup.RepositoryStructure,Starcounter.Advanced.Configuration.ServerConfiguration)">
            <summary>
            Initializes a new <see cref="T:Starcounter.Server.Setup.RepositorySetup"/> by specifying a
            structure, a server configuration and an engine configuration.
            </summary>
            <param name="structure">A <see cref="T:Starcounter.Server.Setup.RepositoryStructure"/> to use.</param>
            <param name="serverConfiguration">The <see cref="F:Starcounter.Server.Setup.RepositorySetup.ServerConfiguration"/> to
            use.</param>
        </member>
        <member name="M:Starcounter.Server.Setup.RepositorySetup.Execute">
            <summary>
            Creates the repository on disk.
            </summary>
        </member>
        <member name="T:Starcounter.Server.Setup.RepositoryStructure">
            <summary>
            Represents the disk structure of a server repository.
            </summary>
            <remarks>
            A <see cref="T:Starcounter.Server.Setup.RepositoryStructure"/> is used in the process when
            creating repositories (and ultimately, servers). Instances of this
            class can be created to present to clients the suggested paths to
            use for a particular repository, to allow clients to modify these
            paths and to finally, assist in creating the directory structure
            on the local disk.
            </remarks>
        </member>
        <member name="F:Starcounter.Server.Setup.RepositoryStructure.RepositoryDirectory">
            <summary>
            Gets the repository. This field is read-only. It can be
            specified in the constructor only.
            </summary>
        </member>
        <member name="P:Starcounter.Server.Setup.RepositoryStructure.DatabaseDirectory">
            <summary>
            Gets or sets the database directory.
            </summary>
        </member>
        <member name="P:Starcounter.Server.Setup.RepositoryStructure.DataDirectory">
            <summary>
            Gets or sets the data directory.
            </summary>
        </member>
        <member name="P:Starcounter.Server.Setup.RepositoryStructure.TempDirectory">
            <summary>
            Gets or sets the temporary directory.
            </summary>
        </member>
        <member name="P:Starcounter.Server.Setup.RepositoryStructure.LogDirectory">
            <summary>
            Gets or sets the log directory.
            </summary>
        </member>
        <member name="P:Starcounter.Server.Setup.RepositoryStructure.SystemHttpPort">
            <summary>
            Gets or sets the Administrator Tcp port.
            </summary>
        </member>
        <member name="M:Starcounter.Server.Setup.RepositoryStructure.NewDefault(System.String)">
            <summary>
            Creates a <see cref="T:Starcounter.Server.Setup.RepositoryStructure"/> with a default structure
            and a name based on <paramref name="repositoryDirectory"/>.
            </summary>
            <param name="repositoryDirectory">
            The directory to use as the repository directory for the repository
            to be created.
            </param>
            <returns>A <see cref="T:Starcounter.Server.Setup.RepositoryStructure"/> with default directory
            specifications based on <paramref name="repositoryDirectory"/>.
            </returns>
        </member>
        <member name="M:Starcounter.Server.Setup.RepositoryStructure.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new <see cref="T:Starcounter.Server.Setup.RepositoryStructure"/> with the given
            values.
            </summary>
            <param name="repositoryDirectory">
            The repository directory to use. Must be specified and must be a valid
            path specification.
            </param>
            <param name="databaseDirectory">Specifies an optional database directory.
            Pass <see langword="null"/> to use the default database directory for the
            specified <paramref name="repositoryDirectory"/>.</param>
            <param name="dataDirectory">Specifies an optional data directory.
            Pass <see langword="null"/> to use the default data directory for the
            specified <paramref name="repositoryDirectory"/></param>
            <param name="tempDirectory">Specifies an optional temporary directory.
            Pass <see langword="null"/> to use the default temporary directory for the
            specified <paramref name="repositoryDirectory"/></param>
            <param name="logDirectory">Specifies an optional logging directory.
            Pass <see langword="null"/> to use the default logging directory for the
            specified <paramref name="repositoryDirectory"/></param>
        </member>
        <member name="P:Starcounter.Server.Setup.RepositoryStructure.Name">
            <summary>
            Gets the name of the <see cref="T:Starcounter.Server.Setup.RepositoryStructure"/>.
            </summary>
        </member>
        <member name="P:Starcounter.Server.Setup.RepositoryStructure.ServerConfigurationPath">
            <summary>
            Gets the path to the server configuration file for the current
            <see cref="T:Starcounter.Server.Setup.RepositoryStructure"/>
            </summary>
        </member>
        <member name="M:Starcounter.Server.Setup.RepositoryStructure.Create">
            <summary>
            Creates the current <see cref="T:Starcounter.Server.Setup.RepositoryStructure"/> on disk.
            </summary>
        </member>
        <member name="M:Starcounter.Server.Setup.RepositoryStructure.AssureDirectory(System.String)">
            <summary>
            Assures the directory specified by <paramref name="path"/> is
            created on disk if it does not exist.
            </summary>
            <param name="path">Path to assure.</param>
            <returns>The path to the directory.</returns>
        </member>
        <member name="M:Starcounter.Server.Setup.RepositoryStructure.UseDirectoryPathOrCreateDefault(System.String@,System.Func{System.String,System.String,System.String},System.String,System.String)">
            <summary>
            Assures a path, either by using the supplied value or by creating
            a new one using the supplied function.
            </summary>
            <param name="path">Path to assure.</param>
            <param name="createDefaultPath">Function to use if a new path must
            be created.</param>
            <param name="root">Root of the path to create. Only used if a new
            path must be created.</param>
            <param name="directory">Directory of the path to create. Only used
            if a new path must be created.</param>
        </member>
        <member name="T:Starcounter.Server.ServerServiceProcess">
            <summary>
            Represents a running instance of the server service, 
            hosted in a Windows service- or interactive, user-mode
            process.
            </summary>
        </member>
        <member name="P:Starcounter.Server.ServerServiceProcess.RunService">
            <summary>
            Gets or sets a value indicating how the current
            process was told to be hosted when started; as a Windows
            service, or as a standard, user interactive process.
            </summary>
        </member>
        <member name="F:Starcounter.Server.ServerServiceProcess.ServerName">
            <summary>
            Gets or sets the name of the server to start, passed 
            to the core service library.
            </summary>
        </member>
        <member name="P:Starcounter.Server.ServerServiceProcess.LogSteps">
            <summary>
            Gets or sets a value indicating of the core service
            library should be invoked with the parameter with the
            same name.
            </summary>
        </member>
        <member name="M:Starcounter.Server.ServerServiceProcess.IsOnline">
            <summary>
            Checks if the personal server is up and running and is available for new requests.
            </summary>
            <returns><c>true</c> if the server is running and considered online; <c>false</c>
            if not running.</returns>
        </member>
        <member name="M:Starcounter.Server.ServerServiceProcess.StartInteractiveOnDemand(System.Boolean)">
            <summary>
            Starts the server in interactive mode, on demand. When the method returns it is assured
            that the server is running and available for new requests. Exception will be thrown for
            any failure that happens during startup.
            </summary>
            <remarks>
            This method does not check for an existing running server. If the server is already 
            running an exception will be thrown.
            </remarks>
            <param name="withNoWindow">
            Specifies if the about-to-be-started server should be started in a new window or not.
            </param>
        </member>
        <member name="M:Starcounter.Server.ServerServiceProcess.#ctor(System.String)">
            <summary>
            Initialize a <see cref="T:Starcounter.Server.ServerServiceProcess"/> with default
            values.
            </summary>
        </member>
        <member name="M:Starcounter.Server.ServerServiceProcess.Launch(System.Boolean)">
            <summary>
            Executes the server.
            </summary>
            <param name="runService">If <c>true</c>, the current
            server process will attach and run under the Windows
            Service Control Manager as a service; otherwise, as
            a standard user-interactive process.</param>
        </member>
        <member name="M:Starcounter.Server.ServerServiceProcess.RunInteractive">
            <summary>
            Runs the server in an interactive process, i.e. under a
            logged in user.
            </summary>
        </member>
        <member name="M:Starcounter.Server.ServerServiceProcess.WaitUntilServerIsOnline(System.Diagnostics.Process)">
            <summary>
            Listens to the online event for the administrator server. If the server is already 
            online the method will return immediately. 
            </summary>
            <param name="serverProcess">The process to wait for, hosting the admin server.</param>
        </member>
        <member name="T:Starcounter.Server.Windows.LocalWindowsServiceHandle">
            <summary>
            
            </summary>
        </member>
        <member name="T:Starcounter.Server.Windows.LocalWindowsServiceManager">
            <summary>
            
            </summary>
        </member>
        <member name="T:Starcounter.Server.Windows.Win32Error">
            <summary>
            Expose a set of Windows platform error constants.
            </summary>
        </member>
        <member name="T:Starcounter.Server.Windows.Win32Service">
            <summary>
            PInvoke signatures for unmanaged service application related
            native Win32 functions.
            </summary>
        </member>
        <member name="T:Starcounter.Server.Windows.Win32Service.SERVICE_ACCESS">
            <summary>
            Access to the service. Before granting the requested access, the
            system checks the access token of the calling process.
            </summary>
        </member>
        <member name="F:Starcounter.Server.Windows.Win32Service.SERVICE_ACCESS.SERVICE_QUERY_CONFIG">
            <summary>
            Required to call the QueryServiceConfig and
            QueryServiceConfig2 functions to query the service configuration.
            </summary>
        </member>
        <member name="F:Starcounter.Server.Windows.Win32Service.SERVICE_ACCESS.SERVICE_CHANGE_CONFIG">
            <summary>
            Required to call the ChangeServiceConfig or ChangeServiceConfig2 function
            to change the service configuration. Because this grants the caller
            the right to change the executable file that the system runs,
            it should be granted only to administrators.
            </summary>
        </member>
        <member name="F:Starcounter.Server.Windows.Win32Service.SERVICE_ACCESS.SERVICE_QUERY_STATUS">
            <summary>
            Required to call the QueryServiceStatusEx function to ask the service
            control manager about the status of the service.
            </summary>
        </member>
        <member name="F:Starcounter.Server.Windows.Win32Service.SERVICE_ACCESS.SERVICE_ENUMERATE_DEPENDENTS">
            <summary>
            Required to call the EnumDependentServices function to enumerate all
            the services dependent on the service.
            </summary>
        </member>
        <member name="F:Starcounter.Server.Windows.Win32Service.SERVICE_ACCESS.SERVICE_START">
            <summary>
            Required to call the StartService function to start the service.
            </summary>
        </member>
        <member name="F:Starcounter.Server.Windows.Win32Service.SERVICE_ACCESS.SERVICE_STOP">
            <summary>
                Required to call the ControlService function to stop the service.
            </summary>
        </member>
        <member name="F:Starcounter.Server.Windows.Win32Service.SERVICE_ACCESS.SERVICE_PAUSE_CONTINUE">
            <summary>
            Required to call the ControlService function to pause or continue
            the service.
            </summary>
        </member>
        <member name="F:Starcounter.Server.Windows.Win32Service.SERVICE_ACCESS.SERVICE_INTERROGATE">
            <summary>
            Required to call the EnumDependentServices function to enumerate all
            the services dependent on the service.
            </summary>
        </member>
        <member name="F:Starcounter.Server.Windows.Win32Service.SERVICE_ACCESS.SERVICE_USER_DEFINED_CONTROL">
            <summary>
            Required to call the ControlService function to specify a user-defined
            control code.
            </summary>
        </member>
        <member name="F:Starcounter.Server.Windows.Win32Service.SERVICE_ACCESS.SERVICE_ALL_ACCESS">
            <summary>
            Includes STANDARD_RIGHTS_REQUIRED in addition to all access rights in this table.
            </summary>
        </member>
        <member name="F:Starcounter.Server.Windows.Win32Service.SERVICE_ACCESS.ACCESS_SYSTEM_SECURITY">
            <summary>
            Required to call the QueryServiceObjectSecurity or
            SetServiceObjectSecurity function to access the SACL. The proper
            way to obtain this access is to enable the SE_SECURITY_NAME
            privilege in the caller's current access token, open the handle
            for ACCESS_SYSTEM_SECURITY access, and then disable the privilege.
            </summary>
        </member>
        <member name="F:Starcounter.Server.Windows.Win32Service.SERVICE_ACCESS.DELETE">
            <summary>
            Required to call the DeleteService function to delete the service.
            </summary>
        </member>
        <member name="F:Starcounter.Server.Windows.Win32Service.SERVICE_ACCESS.READ_CONTROL">
            <summary>
            Required to call the QueryServiceObjectSecurity function to query
            the security descriptor of the service object.
            </summary>
        </member>
        <member name="F:Starcounter.Server.Windows.Win32Service.SERVICE_ACCESS.WRITE_DAC">
            <summary>
            Required to call the SetServiceObjectSecurity function to modify
            the Dacl member of the service object's security descriptor.
            </summary>
        </member>
        <member name="F:Starcounter.Server.Windows.Win32Service.SERVICE_ACCESS.WRITE_OWNER">
            <summary>
            Required to call the SetServiceObjectSecurity function to modify
            the Owner and Group members of the service object's security
            descriptor.
            </summary>
        </member>
        <member name="T:Starcounter.Server.Windows.Win32Service.SERVICE_TYPE">
            <summary>
            Service types.
            </summary>
        </member>
        <member name="F:Starcounter.Server.Windows.Win32Service.SERVICE_TYPE.SERVICE_KERNEL_DRIVER">
            <summary>
            Driver service.
            </summary>
        </member>
        <member name="F:Starcounter.Server.Windows.Win32Service.SERVICE_TYPE.SERVICE_FILE_SYSTEM_DRIVER">
            <summary>
            File system driver service.
            </summary>
        </member>
        <member name="F:Starcounter.Server.Windows.Win32Service.SERVICE_TYPE.SERVICE_WIN32_OWN_PROCESS">
            <summary>
            Service that runs in its own process.
            </summary>
        </member>
        <member name="F:Starcounter.Server.Windows.Win32Service.SERVICE_TYPE.SERVICE_WIN32_SHARE_PROCESS">
            <summary>
            Service that shares a process with one or more other services.
            </summary>
        </member>
        <member name="F:Starcounter.Server.Windows.Win32Service.SERVICE_TYPE.SERVICE_INTERACTIVE_PROCESS">
            <summary>
            The service can interact with the desktop.
            </summary>
        </member>
        <member name="T:Starcounter.Server.Windows.Win32Service.SERVICE_START">
            <summary>
            Service start options
            </summary>
        </member>
        <member name="F:Starcounter.Server.Windows.Win32Service.SERVICE_START.SERVICE_BOOT_START">
            <summary>
            A device driver started by the system loader. This value is valid
            only for driver services.
            </summary>
        </member>
        <member name="F:Starcounter.Server.Windows.Win32Service.SERVICE_START.SERVICE_SYSTEM_START">
            <summary>
            A device driver started by the IoInitSystem function. This value
            is valid only for driver services.
            </summary>
        </member>
        <member name="F:Starcounter.Server.Windows.Win32Service.SERVICE_START.SERVICE_AUTO_START">
            <summary>
            A service started automatically by the service control manager
            during system startup. For more information, see Automatically
            Starting Services.
            </summary>
        </member>
        <member name="F:Starcounter.Server.Windows.Win32Service.SERVICE_START.SERVICE_DEMAND_START">
            <summary>
            A service started by the service control manager when a process
            calls the StartService function. For more information, see
            Starting Services on Demand.
            </summary>
        </member>
        <member name="F:Starcounter.Server.Windows.Win32Service.SERVICE_START.SERVICE_DISABLED">
            <summary>
            A service that cannot be started. Attempts to start the service
            result in the error code ERROR_SERVICE_DISABLED.
            </summary>
        </member>
        <member name="T:Starcounter.Server.Windows.Win32Service.SERVICE_ERROR">
            <summary>
            Severity of the error, and action taken, if this service fails
            to start.
            </summary>
        </member>
        <member name="F:Starcounter.Server.Windows.Win32Service.SERVICE_ERROR.SERVICE_ERROR_IGNORE">
            <summary>
            The startup program ignores the error and continues the startup
            operation.
            </summary>
        </member>
        <member name="F:Starcounter.Server.Windows.Win32Service.SERVICE_ERROR.SERVICE_ERROR_NORMAL">
            <summary>
            The startup program logs the error in the event log but continues
            the startup operation.
            </summary>
        </member>
        <member name="F:Starcounter.Server.Windows.Win32Service.SERVICE_ERROR.SERVICE_ERROR_SEVERE">
            <summary>
            The startup program logs the error in the event log. If the
            last-known-good configuration is being started, the startup
            operation continues. Otherwise, the system is restarted with
            the last-known-good configuration.
            </summary>
        </member>
        <member name="F:Starcounter.Server.Windows.Win32Service.SERVICE_ERROR.SERVICE_ERROR_CRITICAL">
            <summary>
            The startup program logs the error in the event log, if possible.
            If the last-known-good configuration is being started, the startup
            operation fails. Otherwise, the system is restarted with the
            last-known good configuration.
            </summary>
        </member>
        <member name="T:Starcounter.Server.Windows.WindowsExceptionHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Starcounter.Server.Windows.WindowsServiceHelper.GetServiceConfig(System.String)">
            <summary>
            Retreives service configuration information for the local service
            with the given <paramref name="serviceName"/>.
            </summary>
            <param name="serviceName">
            Name of the service whose configuration information we want to access.
            </param>
            <returns>
            Information about the given service.
            </returns>
        </member>
        <member name="M:Starcounter.Server.Windows.WindowsServiceHelper.GetServiceConfig(System.ServiceProcess.ServiceController)">
            <summary>
            Retreives service configuration information for the local service
            represented by <paramref name="controller"/>.
            </summary>
            <param name="controller">
            Controller referencing the service whose configuration information we
            want to access.
            </param>
            <returns>
            Information about the given service.
            </returns>
        </member>
        <member name="M:Starcounter.Server.Windows.WindowsServiceHelper.GetServiceCommandLine(System.String)">
            <summary>
            Retreives command line information for the local service with
            the name <paramref name="serviceName"/>
            </summary>
            <remarks>
            The command line information of configured services is stored
            in the registry variable "ImagePath".
            </remarks>
            <param name="serviceName">
            The name of the service whose command line we want to access.
            </param>
            <returns>
            Command line of the service named <paramref name="serviceName"/>.
            </returns>
        </member>
        <member name="M:Starcounter.Server.Windows.WindowsServiceHelper.GetServiceCommandLine(System.ServiceProcess.ServiceController)">
            <summary>
            Retreives command line information for the local service
            referenced by <paramref name="controller"/>
            </summary>
            <remarks>
            The command line information of configured services is stored
            in the registry variable "ImagePath".
            </remarks>
            <param name="controller">
            Controller referencing the service whose configuration information
            we want to access.
            </param>
            <returns>
            Command line of the service referenced by <paramref name="controller"/>.
            </returns>
        </member>
        <member name="M:Starcounter.Server.Windows.WindowsServiceHelper.UsingService``1(System.ServiceProcess.ServiceController,Starcounter.Server.Windows.Win32Service.SERVICE_ACCESS,System.Func{Starcounter.Server.Windows.LocalWindowsServiceHandle,``0})">
            <summary>
            Invokes a method that needs a service handle with a certain level
            of access privileges, ensuring resources are freed correctly.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="serviceController">The service we open a handle to.</param>
            <param name="accessNeeded">The desired access.</param>
            <param name="target">The target to invoke.</param>
            <returns>A value corresponding to the type of the result.</returns>
        </member>
        <member name="T:Starcounter.Server.PublicModel.AppInfo">
            <summary>
            Represents a Starcounter application as maintained by the
            server.
            </summary>
        </member>
        <member name="P:Starcounter.Server.PublicModel.AppInfo.Key">
            <summary>
            Gets or sets the server key for this application. A key must
            be assured to be unique within the scope of a single database.
            </summary>
        </member>
        <member name="P:Starcounter.Server.PublicModel.AppInfo.Started">
            <summary>
            Gets the time when the current application started.
            </summary>
            <seealso cref="P:Starcounter.Server.PublicModel.AppInfo.LastRestart"/>
        </member>
        <member name="P:Starcounter.Server.PublicModel.AppInfo.LastRestart">
            <summary>
            Gets the time when the current application was last
            restarted, due to the code host it lived in needed to
            restart.
            </summary>
            <seealso cref="P:Starcounter.Server.PublicModel.AppInfo.LastRestart"/>
        </member>
        <member name="P:Starcounter.Server.PublicModel.AppInfo.StartedBy">
            <summary>
            Gets a value holding information about who started the
            current application (what client and, possibly, user).
            </summary>
        </member>
        <member name="M:Starcounter.Server.PublicModel.AppInfo.#ctor(System.String,System.String,System.String,System.String,System.String[],System.String)">
            <summary>
            Initializes a new <see cref="T:Starcounter.Server.PublicModel.AppInfo"/>.
            </summary>
            <param name="name">The name of the application.</param>
            <param name="applicationFile">The application file, as given by the user.</param>
            <param name="applicationBinaryFile">The application binary.</param>
            <param name="workingDirectory">The working directory.</param>
            <param name="arguments">The arguments with which the application was started.</param>
            <param name="startedBy">The context from where the application was started.</param>
        </member>
        <member name="M:Starcounter.Server.PublicModel.AppInfo.EqualBinaryFile(Starcounter.Server.PublicModel.AppInfo)">
            <summary>
            Gets a value indicating if the current instance represents
            an application that runs a binary from the same path as
            <paramref name="other"/>.
            </summary>
            <param name="other">The application to compare against.</param>
            <returns><c>true</c> if the current application reference the
            same binary file as <paramref name="other"/>; <c>false otherwise.
            </c></returns>
        </member>
        <member name="M:Starcounter.Server.PublicModel.AppInfo.EqualApplicationFile(Starcounter.Server.PublicModel.AppInfo)">
            <summary>
            Gets a value indicating if the current instance represents
            an application that was launched using the same application file as
            <paramref name="other"/>.
            </summary>
            <param name="other">The application to compare against.</param>
            <returns><c>true</c> if the current application reference the
            same application file as <paramref name="other"/>; <c>false otherwise.
            </c></returns>
        </member>
        <member name="M:Starcounter.Server.PublicModel.AppInfo.DeepClone">
            <summary>
            Creates a full clone of the current <see cref="T:Starcounter.Server.PublicModel.AppInfo"/>.
            </summary>
            <returns>A clone of the current <see cref="T:Starcounter.Server.PublicModel.AppInfo"/>.
            </returns>
        </member>
        <member name="T:Starcounter.Server.PublicModel.Commands.ActionCommand">
            <summary>
            Runs an <see cref="T:System.Action"/> in the server.
            </summary>
        </member>
        <member name="M:Starcounter.Server.PublicModel.Commands.ActionCommand.#ctor(Starcounter.Server.ServerEngine,System.Action,System.String,System.Object[])">
            <summary>
            Initializes a new <see cref="T:Starcounter.Server.PublicModel.Commands.ActionCommand"/>.
            </summary>
            <param name="engine">The engine to which the command belongs.</param>
            <param name="action">The action to invoke.</param>
            <param name="descriptionFormat">Description of the command, possibly
            in a template format.</param>
            <param name="descriptionArgs">Optional args to be inserted into the
            description template.</param>
        </member>
        <member name="M:Starcounter.Server.PublicModel.Commands.ActionCommand.Invoke(Starcounter.Server.Commands.ICommandProcessor)">
            <summary>
            Invokes the action attached to this command.
            </summary>
            <param name="processor"></param>
        </member>
        <member name="M:Starcounter.Server.PublicModel.Commands.ActionCommand`1.#ctor(Starcounter.Server.ServerEngine,System.Action{Starcounter.Server.Commands.ICommandProcessor,`0},`0,System.String,System.Object[])">
            <summary>
            Initializes a new <see cref="T:Starcounter.Server.PublicModel.Commands.ActionCommand"/>.
            </summary>
            <param name="engine">The engine to which the command belongs.</param>
            <param name="action">The action to invoke.</param>
            <param name="param1">The first parameter to pass to the given action.
            </param>
            <param name="descriptionFormat">Description of the command, possibly
            in a template format.</param>
            <param name="descriptionArgs">Optional args to be inserted into the
            description template.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Starcounter.Server.PublicModel.Commands.ActionCommand`1.Invoke(Starcounter.Server.Commands.ICommandProcessor)" -->
        <member name="M:Starcounter.Server.PublicModel.Commands.ActionCommand`2.#ctor(Starcounter.Server.ServerEngine,System.Action{Starcounter.Server.Commands.ICommandProcessor,`0,`1},`0,`1,System.String,System.Object[])">
            <summary>
            Initializes a new <see cref="T:Starcounter.Server.PublicModel.Commands.ActionCommand"/>.
            </summary>
            <param name="engine">The engine to which the command belongs.</param>
            <param name="action">The action to invoke.</param>
            <param name="param1">The first parameter to pass to the given action.
            </param>
            <param name="param2">The second parameter to pass to the given action.
            </param>
            <param name="descriptionFormat">Description of the command, possibly
            in a template format.</param>
            <param name="descriptionArgs">Optional args to be inserted into the
            description template.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Starcounter.Server.PublicModel.Commands.ActionCommand`2.Invoke(Starcounter.Server.Commands.ICommandProcessor)" -->
        <member name="T:Starcounter.Server.PublicModel.Commands.DeleteDatabaseCommand">
            <summary>
            Defines the command to use when a host want to issue a delete
            of a database.
            </summary>
        </member>
        <member name="F:Starcounter.Server.PublicModel.Commands.DeleteDatabaseCommand.DeleteDataFiles">
            <summary>
            Gets a value indicating if the data files (i.e image-
            and transaction log files) are to be deleted too.
            </summary>
        </member>
        <member name="M:Starcounter.Server.PublicModel.Commands.DeleteDatabaseCommand.#ctor(Starcounter.Server.ServerEngine,System.String,System.Boolean)">
            <summary>
            Initialize a new <see cref="T:Starcounter.Server.PublicModel.Commands.DeleteDatabaseCommand"/>.
            </summary>
            <param name="engine">The engine to which the command belong.</param>
            <param name="databaseName">The name of the database to delete.</param>
            <param name="deleteDataFiles">A value indicating if data files should
            be deleted too.</param>
        </member>
        <member name="T:Starcounter.Server.PublicModel.Commands.InvokableCommand">
            <summary>
            Base class of all server commands that executes some
            runtime-bound piece of code (e.g. invoking some delegate).
            </summary>
        </member>
        <member name="M:Starcounter.Server.PublicModel.Commands.InvokableCommand.#ctor(Starcounter.Server.ServerEngine,System.String,System.Object[])">
            <summary>
            Initializes a new <see cref="T:Starcounter.Server.PublicModel.Commands.InvokableCommand"/>.
            </summary>
            <param name="engine">The engine to which the command belongs.</param>
            <param name="descriptionFormat">Description of the command, possibly
            in a template format.</param>
            <param name="descriptionArgs">Optional args to be inserted into the
            description template.</param>
        </member>
        <member name="M:Starcounter.Server.PublicModel.Commands.InvokableCommand.Invoke(Starcounter.Server.Commands.ICommandProcessor)">
            <summary>
            Executes the logic attached to this command as decided
            by contrete implementations / subclasses of this class.
            </summary>
            <param name="processor">Interface to the processor that runs
            the current command.</param>
        </member>
        <member name="T:Starcounter.Server.PublicModel.Commands.CreateDatabaseCommand">
            <summary>
            Encapsulates the parameters used when creating a new database.
            </summary>
        </member>
        <member name="F:Starcounter.Server.PublicModel.Commands.CreateDatabaseCommand.SetupProperties">
            <summary>
            Gets the property structure describing the properties that
            should be used when creating the database.
            </summary>
        </member>
        <member name="M:Starcounter.Server.PublicModel.Commands.CreateDatabaseCommand.#ctor(Starcounter.Server.ServerEngine,System.String)">
            <summary>
            Initializes a new <see cref="T:Starcounter.Server.PublicModel.Commands.CreateDatabaseCommand"/>.
            </summary>
            <param name="engine"></param>
            <param name="databaseName"></param>
        </member>
        <member name="T:Starcounter.Server.PublicModel.Commands.DatabaseCommand">
            <summary>
            Server command targeting a specific database on the server on
            which it executes.
            </summary>
        </member>
        <member name="M:Starcounter.Server.PublicModel.Commands.DatabaseCommand.CreateDatabaseUri(Starcounter.Server.ServerEngine,System.String)">
            <summary>
            Utility method that creates a database <see cref="T:Starcounter.ScUri"/> as a string,
            referencing the specified database hosted in the given server engine.
            </summary>
            <param name="engine"></param>
            <param name="databaseName"></param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Server.PublicModel.Commands.DatabaseCommand.#ctor(Starcounter.Server.ServerEngine,System.String,System.String,System.Object[])">
            <summary>
            Initializes a new <see cref="T:Starcounter.Server.PublicModel.Commands.DatabaseCommand" />.
            </summary>
            <param name="engine">The engine.</param>
            <param name="databaseUri">The URI of the <see cref="T:Starcounter.Server.Database">database</see>
            this commmand targets.</param>
            <param name="descriptionFormat">Formatting string of the command description.</param>
            <param name="descriptionArgs">Arguments for <paramref name="descriptionFormat" />.</param>
        </member>
        <member name="M:Starcounter.Server.PublicModel.Commands.DatabaseCommand.#ctor(Starcounter.Server.ServerEngine,System.String,System.String)">
            <summary>
            Initializes a new <see cref="T:Starcounter.Server.PublicModel.Commands.DatabaseCommand" />.
            </summary>
            <param name="engine">The engine.</param>
            <param name="databaseUri">The URI of the <see cref="T:Starcounter.Server.Database">database</see>
            this commmand targets.</param>
            <param name="description">Human-readable description of the command.</param>
        </member>
        <member name="P:Starcounter.Server.PublicModel.Commands.DatabaseCommand.DatabaseUri">
            <summary>
            Gets the URI of the <see cref="T:Starcounter.Server.Database">database</see> this
            command targets.
            </summary>
            <remarks>
            Most specializations of <see cref="T:Starcounter.Server.PublicModel.Commands.DatabaseCommand"/> will likely want
            to keep a strong reference to the server side database object representing
            the database. We reject to force referencing the database here though,
            since not all commands are sure to either have the reference accesible
            or want to keep a strong reference to it. Hence, we stick to keeping the
            URI as a string.
            </remarks>
        </member>
        <member name="P:Starcounter.Server.PublicModel.Commands.DatabaseCommand.Name">
            <summary>
            Gets the name of the database this command targets, scoped by the
            server engine.
            </summary>
        </member>
        <member name="T:Starcounter.Server.PublicModel.Commands.ServerCommand">
            <summary>
            Base class of all server commands, possible to install processors for
            and execute via the server command queue / dispatcher.
            </summary>
        </member>
        <member name="M:Starcounter.Server.PublicModel.Commands.ServerCommand.#ctor(Starcounter.Server.ServerEngine,System.String,System.Object[])">
            <summary>
            Initializes a new <see cref="T:Starcounter.Server.PublicModel.Commands.ServerCommand" />.
            </summary>
            <param name="engine">The engine.</param>
            <param name="descriptionFormat">Formatting string of the command description.</param>
            <param name="descriptionArgs">Arguments for <paramref name="descriptionFormat" />.</param>
        </member>
        <member name="M:Starcounter.Server.PublicModel.Commands.ServerCommand.#ctor(Starcounter.Server.ServerEngine,System.String)">
            <summary>
            Initializes a new <see cref="T:Starcounter.Server.PublicModel.Commands.ServerCommand" />.
            </summary>
            <param name="engine">The engine.</param>
            <param name="description">Human-readable description of the command.</param>
            <exception cref="T:System.ArgumentNullException">description</exception>
        </member>
        <member name="P:Starcounter.Server.PublicModel.Commands.ServerCommand.Engine">
            <summary>
            Gets the <see cref="T:Starcounter.Server.ServerEngine"/> this command is being
            executed on.
            </summary>
        </member>
        <member name="P:Starcounter.Server.PublicModel.Commands.ServerCommand.Description">
            <summary>
            Gets a human-readable description of this command.
            </summary>
        </member>
        <member name="P:Starcounter.Server.PublicModel.Commands.ServerCommand.EnableWaiting">
            <summary>
            Gets or sets a value indicating if the server should enable
            wait handle based waiting for the current command.
            </summary>
        </member>
        <member name="P:Starcounter.Server.PublicModel.Commands.ServerCommand.Fingerprint">
            <summary>
            Gets or sets a value that represents the fingerprint of the
            principal entity the current command address.
            </summary>
            <remarks>
            The fingerprint is opaque and can be used by specializations
            at will.
            </remarks>
        </member>
        <member name="M:Starcounter.Server.PublicModel.Commands.ServerCommand.GetReadyToEnqueue">
            <summary>
            Infrastructure method invoked by the server engine just before a
            command is enqued with the dispatcher (i.e. in the hosts calling
            thread). The command gets a chance to either fill in defaults
            and/or validate it's values and raise an exception if they violate
            constraints.
            </summary>
        </member>
        <member name="T:Starcounter.Server.PublicModel.Commands.StartExecutableCommand">
            <summary>
            A command representing the request to start an executable.
            </summary>
        </member>
        <member name="F:Starcounter.Server.PublicModel.Commands.StartExecutableCommand.Application">
            <summary>
            The application that is to be started.
            </summary>
        </member>
        <member name="P:Starcounter.Server.PublicModel.Commands.StartExecutableCommand.DatabaseName">
            <summary>
            Gets or sets the name of the database the specified application
            should load into.
            </summary>
        </member>
        <member name="P:Starcounter.Server.PublicModel.Commands.StartExecutableCommand.NoDb">
            <summary>
            Gets or sets a value dictating if the App being executed should
            be considered not containing anything that needs the database services
            of Starcounter (i.e. weaving, SQL, etc).
            </summary>
            <remarks>
            This switch will likely be made obsolete in the near future, so
            use it only if you are very certain of what you do and why.
            </remarks>
        </member>
        <member name="P:Starcounter.Server.PublicModel.Commands.StartExecutableCommand.RunEntrypointAsynchronous">
            <summary>
            Instructs the processor of this command to run the
            entrypoint of the executable in an asynchronous fashion.
            </summary>
        </member>
        <member name="P:Starcounter.Server.PublicModel.Commands.StartExecutableCommand.TransactEntrypoint">
            <summary>
            Instructs the processor of this command to run the
            entrypoint of the executable within the scope of a
            write transaction.
            </summary>
        </member>
        <member name="M:Starcounter.Server.PublicModel.Commands.StartExecutableCommand.#ctor(Starcounter.Server.ServerEngine,System.String,Starcounter.Server.PublicModel.AppInfo)">
            <summary>
            Initializes an instance of <see cref="T:Starcounter.Server.PublicModel.Commands.StartExecutableCommand"/>.
            </summary>
            <param name="engine">The <see cref="T:Starcounter.Server.ServerEngine"/> where this command
            are to execute.</param>
            <param name="application">The application whose executable are to be
            started.</param>
            <param name="databaseName">The database the given application should be
            started in.</param>
        </member>
        <member name="M:Starcounter.Server.PublicModel.Commands.StartExecutableCommand.GetReadyToEnqueue">
            <inheritdoc />
        </member>
        <member name="T:Starcounter.Server.PublicModel.Commands.StartDatabaseCommand">
            <summary>
            Encapsulates a request to start a database.
            </summary>
        </member>
        <member name="M:Starcounter.Server.PublicModel.Commands.StartDatabaseCommand.#ctor(Starcounter.Server.ServerEngine,System.String)">
            <summary>
            Initializes a new <see cref="T:Starcounter.Server.PublicModel.Commands.StartDatabaseCommand"/>.
            </summary>
            <param name="engine"></param>
            <param name="databaseName"></param>
        </member>
        <member name="P:Starcounter.Server.PublicModel.Commands.StartDatabaseCommand.NoDb">
            <summary>
            Gets or sets a value indicating if the code host that are to be started
            should connect to the database or not.
            </summary>
        </member>
        <member name="P:Starcounter.Server.PublicModel.Commands.StartDatabaseCommand.LogSteps">
            <summary>
            Gets or sets a value indicating if the code host that are to be started
            should log it's boot sequence steps or not.
            </summary>
        </member>
        <member name="P:Starcounter.Server.PublicModel.Commands.StartDatabaseCommand.CodeHostCommandLineAdditions">
            <summary>
            Gets or sets a value that allows the caller to apply extra
            or custom command-line parameters to the code host process,
            applied on top of the options and parameters passed by the
            server engine.
            </summary>
        </member>
        <member name="T:Starcounter.Server.PublicModel.Commands.StopDatabaseCommand">
            <summary>
            Encapsulates a request to stop or suspend a database.
            </summary>
        </member>
        <member name="P:Starcounter.Server.PublicModel.Commands.StopDatabaseCommand.StopDatabaseProcess">
            <summary>
            Gets or sets a value indicating if the command should not
            only stop the worker process for the given database, but
            shut down the database process too.
            </summary>
            <remarks>
            The default is false, meaning the database is suspended.
            </remarks>
        </member>
        <member name="M:Starcounter.Server.PublicModel.Commands.StopDatabaseCommand.#ctor(Starcounter.Server.ServerEngine,System.String)">
            <summary>
            Initializes a new <see cref="T:Starcounter.Server.PublicModel.Commands.StopDatabaseCommand"/>.
            </summary>
            <param name="engine"></param>
            <param name="databaseName"></param>
        </member>
        <member name="M:Starcounter.Server.PublicModel.Commands.StopDatabaseCommand.#ctor(Starcounter.Server.ServerEngine,System.String,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:Starcounter.Server.PublicModel.Commands.StopDatabaseCommand"/>.
            </summary>
            <param name="engine"></param>
            <param name="databaseName"></param>
            <param name="stopDatabaseProcessToo"></param>
        </member>
        <member name="T:Starcounter.Server.PublicModel.Commands.StopExecutableCommand">
            <summary>
            A command representing the request to stop an executable.
            </summary>
        </member>
        <member name="T:Starcounter.Server.PublicModel.Commands.StopExecutableCommand.DefaultProcessor">
            <summary>
            Expose meta information about the default processor of this
            command.
            </summary>
        </member>
        <member name="P:Starcounter.Server.PublicModel.Commands.StopExecutableCommand.DefaultProcessor.Token">
            <summary>
            Gets the processor token of the default processor.
            </summary>
        </member>
        <member name="T:Starcounter.Server.PublicModel.Commands.StopExecutableCommand.DefaultProcessor.Tasks">
            <summary>
            Expose metadata about the individual tasks possibly
            executed by the default processor of this task.
            </summary>
        </member>
        <member name="F:Starcounter.Server.PublicModel.Commands.StopExecutableCommand.Executable">
            <summary>
            The executable to be stopped.
            </summary>
        </member>
        <member name="M:Starcounter.Server.PublicModel.Commands.StopExecutableCommand.#ctor(Starcounter.Server.ServerEngine,System.String,System.String)">
            <summary>
            Initializes a new <see cref="T:Starcounter.Server.PublicModel.Commands.StopExecutableCommand"/>.
            </summary>
            <param name="engine">The server engine where the command will execute.</param>
            <param name="database">The name of the database the executable runs in.</param>
            <param name="executable">The identity of the executable.</param>
        </member>
        <member name="T:Starcounter.Server.PublicModel.CommandDescriptor">
            <summary>
            Describes a command and provides possibly information about it's
            underlying tasks.
            </summary>
        </member>
        <member name="F:Starcounter.Server.PublicModel.CommandDescriptor.Empty">
            <summary>
            The empty
            </summary>
        </member>
        <member name="P:Starcounter.Server.PublicModel.CommandDescriptor.CommandDescription">
            <summary>
            Gets or sets a description that describes - on the type level -
            what the command represented by this information object does.
            </summary>
            <example>"Starts a database"</example>
        </member>
        <member name="P:Starcounter.Server.PublicModel.CommandDescriptor.ProcessorToken">
            <summary>
            Gets or sets the processor token of the command represented.
            The processor token can be used to connect executing command
            information with a metdata construct (i.e. an instance of
            this class) representing the command processor.
            </summary>
        </member>
        <member name="P:Starcounter.Server.PublicModel.CommandDescriptor.Tasks">
            <summary>
            Gets or sets a set of tasks describing in more detail what
            the command represented by <see cref="T:Starcounter.Server.PublicModel.CommandDescriptor"/>
            instances does.
            </summary>
        </member>
        <member name="P:Starcounter.Server.PublicModel.CommandDescriptor.Item(System.Int32)">
            <summary>
            Finds a <see cref="T:Starcounter.Server.PublicModel.TaskInfo"/> by it's identity.
            </summary>
            <param name="id">
            The identity of the task information to retreive.
            </param>
            <returns>
            A <see cref="T:Starcounter.Server.PublicModel.TaskInfo"/> representing the task identified
            by <paramref name="id"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when
            no <see cref="T:Starcounter.Server.PublicModel.TaskInfo"/> with the given <paramref name="id"/>
            could be found.
            </exception>
        </member>
        <member name="T:Starcounter.Server.PublicModel.CommandId">
            <summary>
            Unique identifier of a command.
            </summary>
        </member>
        <member name="F:Starcounter.Server.PublicModel.CommandId.Null">
            <summary>
            The null/empty command identifier.
            </summary>
        </member>
        <member name="P:Starcounter.Server.PublicModel.CommandId.Value">
            <summary>
            Gets an opaque string holding the value of the
            unique command ID.
            </summary>
        </member>
        <member name="M:Starcounter.Server.PublicModel.CommandId.#ctor">
            <summary>
            Constructor enabling this type to be deserialized.
            Use factory method <see cref="M:Starcounter.Server.PublicModel.CommandId.MakeNew"/> to create
            a new instance.
            </summary>
        </member>
        <member name="M:Starcounter.Server.PublicModel.CommandId.MakeNew">
            <summary>
            Makes a new command identifier.
            </summary>
            <returns>A new command identifier.</returns>
        </member>
        <member name="M:Starcounter.Server.PublicModel.CommandId.Parse(System.String)">
            <summary>
            Reconstructs a <see cref="T:Starcounter.Server.PublicModel.CommandId"/> based on the
            given value.
            </summary>
            <param name="value">The value of a previously created
            command.</param>
            <returns>A new <see cref="T:Starcounter.Server.PublicModel.CommandId"/> based on the
            given value.</returns>
        </member>
        <member name="M:Starcounter.Server.PublicModel.CommandId.Equals(Starcounter.Server.PublicModel.CommandId)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Server.PublicModel.CommandId.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Server.PublicModel.CommandId.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Server.PublicModel.CommandId.ToString">
            <inheritdoc />
        </member>
        <member name="T:Starcounter.Server.PublicModel.CommandInfo">
            <summary>
            Snapshot state of an executing command processor.
            </summary>
        </member>
        <member name="M:Starcounter.Server.PublicModel.CommandInfo.#ctor">
            <summary>
            Initializes a <see cref="T:Starcounter.Server.PublicModel.CommandInfo"/> message object.
            </summary>
        </member>
        <member name="P:Starcounter.Server.PublicModel.CommandInfo.Id">
            <summary>
            Command identifier.
            </summary>
        </member>
        <member name="P:Starcounter.Server.PublicModel.CommandInfo.ProcessorToken">
            <summary>
            Gets or sets a value indicating the token of the processor of
            this command. This token can be used to query static metadata
            about the command, enabling service clients to build a rich
            user interface.
            </summary>
        </member>
        <member name="P:Starcounter.Server.PublicModel.CommandInfo.ServerUri">
            <summary>
            URI of the server running the command.
            </summary>
        </member>
        <member name="P:Starcounter.Server.PublicModel.CommandInfo.DatabaseUri">
            <summary>
            URI of the database the current command targets.
            </summary>
            <remarks>
            <para>
            Not all commands are specific to a database, but the vast majority are.
            Hence, we let the database URI be part of the general <see cref="T:Starcounter.Server.PublicModel.CommandInfo"/>
            object rather than specializing it for this scenario.
            </para>
            <para>
            To check if a command targets a database, this property can be queried
            for the value of <see langword="null"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Starcounter.Server.PublicModel.CommandInfo.IsDatabaseActivity">
            <summary>
            Gets a value indicating if the current command represents a
            an activity targeting a specific database.
            </summary>
        </member>
        <member name="P:Starcounter.Server.PublicModel.CommandInfo.Description">
            <summary>
            Human-readable description of the command.
            </summary>
        </member>
        <member name="P:Starcounter.Server.PublicModel.CommandInfo.StartTime">
            <summary>
            Command start time.
            </summary>
        </member>
        <member name="P:Starcounter.Server.PublicModel.CommandInfo.EndTime">
            <summary>
            Command end time.
            </summary>
        </member>
        <member name="P:Starcounter.Server.PublicModel.CommandInfo.Status">
            <summary>
            Command status.
            </summary>
        </member>
        <member name="P:Starcounter.Server.PublicModel.CommandInfo.CorrelatedCommandId">
            <summary>
            Identifier of command to which the current command is correlated,
            i.e. typically the command that caused the current command to be queued.
            </summary>
        </member>
        <member name="P:Starcounter.Server.PublicModel.CommandInfo.IsCompleted">
            <summary>
            Determines whether the command has completed (successfully or not)
            or if it has been cancelled. To determine the exact nature of a
            completed command, consult the <see cref="P:Starcounter.Server.PublicModel.CommandInfo.Status"/> property.
            </summary>
        </member>
        <member name="P:Starcounter.Server.PublicModel.CommandInfo.ExitCode">
            <summary>
            Gets the exit code of the command, or null if no
            exit code was provided by the command.
            </summary>
        </member>
        <member name="P:Starcounter.Server.PublicModel.CommandInfo.Result">
            <summary>
            Gets a possible outcome from the processor. There
            should never be a result unless the command is considered
            completed (successfully or erred).
            </summary>
        </member>
        <member name="P:Starcounter.Server.PublicModel.CommandInfo.Errors">
            <summary>
            Errors that happened during command execution, or <b>null</b>
            if the command executed successfully.
            </summary>
        </member>
        <member name="P:Starcounter.Server.PublicModel.CommandInfo.HasError">
            <summary>
            Determines whether the command completed with errors.
            </summary>
        </member>
        <member name="P:Starcounter.Server.PublicModel.CommandInfo.Progress">
            <summary>
            Gets or sets a value indicating the progress made by the
            command this <see cref="T:Starcounter.Server.PublicModel.CommandInfo"/> represents.
            </summary>
        </member>
        <member name="P:Starcounter.Server.PublicModel.CommandInfo.HasProgress">
            <summary>
            Gets a value indicating if the command comes with any
            progress information.
            </summary>
        </member>
        <member name="M:Starcounter.Server.PublicModel.CommandInfo.GetProgressOf(System.Int32)">
            <summary>
            Returns the progress of a task identified by the given
            task identity, or null if there was no progress info found
            for that task.
            </summary>
            <param name="task">Identity of the task.</param>
            <returns>The progress info of the given task, or null if
            no such progress was found.</returns>
        </member>
        <member name="P:Starcounter.Server.PublicModel.CommandInfo.CompletedEvent">
            <summary>
            Gets or sets a <see cref="T:System.Threading.ManualResetEventSlim"/> that
            the server can use to wait for the command to complete.
            </summary>
            <remarks>
            <para>
            This reference will only be assigned for commands that
            explicitly state that they need to support waiting, see
            <see cref="!:ServerCommand.EnableWaiting"/>.
            </para>
            <para>
            The server core will only signal this once the underlying
            command has fully completed (successfully or failed) and
            when the latest publich snapshot (in the form of a new
            <see cref="T:Starcounter.Server.PublicModel.CommandInfo"/> has been made available to clients
            consuming the public state model. Hence, when this event
            is signaled, the waiting thread should go and grab the
            latest snapshot before returning to the caller.
            </para>
            </remarks>
        </member>
        <member name="M:Starcounter.Server.PublicModel.CommandInfo.Clone">
            <summary>
            Returns a clone of the current object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Starcounter.Server.PublicModel.CommandStatus">
            <summary>
            Statuses of a command.
            </summary>
        </member>
        <member name="F:Starcounter.Server.PublicModel.CommandStatus.Created">
            <summary>
            The created
            </summary>
        </member>
        <member name="F:Starcounter.Server.PublicModel.CommandStatus.Queued">
            <summary>
            Queued for immediate execution.
            </summary>
        </member>
        <member name="F:Starcounter.Server.PublicModel.CommandStatus.Delayed">
            <summary>
            Queued for delayed execution.
            </summary>
        </member>
        <member name="F:Starcounter.Server.PublicModel.CommandStatus.Executing">
            <summary>
            Currently executing.
            </summary>
        </member>
        <member name="F:Starcounter.Server.PublicModel.CommandStatus.Completed">
            <summary>
            Successfully completed.
            </summary>
        </member>
        <member name="F:Starcounter.Server.PublicModel.CommandStatus.Failed">
            <summary>
            Failed.
            </summary>
        </member>
        <member name="F:Starcounter.Server.PublicModel.CommandStatus.Cancelled">
            <summary>
            Cancelled.
            </summary>
        </member>
        <member name="T:Starcounter.Server.PublicModel.TaskInfo">
            <summary>
            Describes a task, possibly executed as part of executing
            a server command.
            </summary>
        </member>
        <member name="P:Starcounter.Server.PublicModel.TaskInfo.ID">
            <summary>
            Numeric identity of the task, used to send over the wire
            when reporting about progress.
            </summary>
        </member>
        <member name="P:Starcounter.Server.PublicModel.TaskInfo.ShortText">
            <summary>
            A short text, typically a single line, describing what the
            task does.
            </summary>
        </member>
        <member name="P:Starcounter.Server.PublicModel.TaskInfo.Description">
            <summary>
            A possibly long description about what this task does.
            </summary>
        </member>
        <member name="P:Starcounter.Server.PublicModel.TaskInfo.Duration">
            <summary>
            The normal/expected duration of this task.
            </summary>
        </member>
        <member name="P:Starcounter.Server.PublicModel.TaskInfo.ProgressUnits">
            <summary>
            Specifies the units for tasks that reports progress
            by numbers, i.e. "Percentage", "Files", "Kilobytes",
            etc.
            </summary>
        </member>
        <member name="T:Starcounter.Server.PublicModel.DatabaseInfo">
            <summary>
            Represents a snapshot of the public state of a database.
            </summary>
        </member>
        <member name="F:Starcounter.Server.PublicModel.DatabaseInfo.Uri">
            <summary>
            Gets or sets the URI of the database.
            </summary>
        </member>
        <member name="F:Starcounter.Server.PublicModel.DatabaseInfo.Name">
            <summary>
            Gets or sets the name of the database.
            </summary>
        </member>
        <member name="F:Starcounter.Server.PublicModel.DatabaseInfo.TransactionLogSize">
            <summary>
            Gets or sets the size of the database log file(s). The
            value is the size in bytes.
            </summary>
            <remarks>
            <para>
            This value is approximate and might be influenced by alignments.
            However, it should be accurate enough to indicate the size of
            the transaction log as usually referenced in day to day
            discussions.
            </para>
            <para>
            Notice that Starcounter supports databases with multiple log
            files. In such an installation, this value is the combined size
            of all transaction logs.
            </para>
            </remarks>
        </member>
        <member name="F:Starcounter.Server.PublicModel.DatabaseInfo.CollationFile">
            <summary>
            Gets or sets the name of the collation file used by the
            database referenced by the current instance.
            </summary>
        </member>
        <member name="F:Starcounter.Server.PublicModel.DatabaseInfo.FirstObjectID">
            <summary>
            Gets or sets the first object ID used by the database.
            </summary>
        </member>
        <member name="F:Starcounter.Server.PublicModel.DatabaseInfo.LastObjectID">
            <summary>
            Gets or sets the last object ID used by the database.
            </summary>
        </member>
        <member name="F:Starcounter.Server.PublicModel.DatabaseInfo.SupportReplication">
            <summary>
            Gets or sets a value indicating if the database referenced
            by the current instance supports replication.
            </summary>
        </member>
        <member name="F:Starcounter.Server.PublicModel.DatabaseInfo.Configuration">
            <summary>
            Gets or sets the database configuration.
            </summary>
        </member>
        <member name="F:Starcounter.Server.PublicModel.DatabaseInfo.ExecutableBasePath">
            <summary>
            Gets the base directory where this database stores and runs
            executables from.
            </summary>
        </member>
        <member name="F:Starcounter.Server.PublicModel.DatabaseInfo.Engine">
            <summary>
            Gets or sets the <see cref="T:Starcounter.Server.PublicModel.EngineInfo"/> of the
            current database. Null indicates the engine is shut
            down (including the host and the database).
            </summary>
        </member>
        <member name="M:Starcounter.Server.PublicModel.DatabaseInfo.#ctor(System.String,System.String,System.Int64,System.String,Starcounter.Server.PublicModel.EngineInfo,Starcounter.Advanced.Configuration.DatabaseConfiguration,System.String)">
            <summary>
            Initializes a <see cref="T:Starcounter.Server.PublicModel.DatabaseInfo"/>.
            </summary>
        </member>
        <member name="T:Starcounter.Server.PublicModel.EngineInfo">
            <summary>
            Represents the subset of a <see cref="T:Starcounter.Server.PublicModel.DatabaseInfo"/> that
            contains information about the state of a possibly running
            database engine.
            </summary>
        </member>
        <member name="F:Starcounter.Server.PublicModel.EngineInfo.Fingerprint">
            <summary>
            Gets an opaque string that can be used to fingerprint
            any engine represented by an instance of this class.
            </summary>
        </member>
        <member name="P:Starcounter.Server.PublicModel.EngineInfo.HostedApps">
            <summary>
            Gets the set of "Apps" currently hosted in the engine
            represented by this snapshot.
            </summary>
        </member>
        <member name="P:Starcounter.Server.PublicModel.EngineInfo.HostProcessId">
            <summary>
            Gets the process ID of the database host process, if running.
            </summary>
        </member>
        <member name="P:Starcounter.Server.PublicModel.EngineInfo.CodeHostArguments">
            <summary>
            Gets a value representing the exact command-line
            arguments string what was used to start the host.
            </summary>
        </member>
        <member name="P:Starcounter.Server.PublicModel.EngineInfo.DatabaseProcessRunning">
            <summary>
            Gets a value indicating if the database process is running.
            </summary>
            <remarks>
            The server intentionally don't reveal the PID or any other sensitive
            information about the database process, just letting server hosts
            know if it's running or not.
            <seealso cref="P:Starcounter.Server.PublicModel.EngineInfo.HostProcessId"/>
            </remarks>
        </member>
        <member name="P:Starcounter.Server.PublicModel.EngineInfo.Identifier">
            <summary>
            Gets a unique identifier used to run and coordinate backend
            processes.
            </summary>
        </member>
        <member name="M:Starcounter.Server.PublicModel.EngineInfo.#ctor">
            <summary>
            Initializes a <see cref="T:Starcounter.Server.PublicModel.EngineInfo"/>.
            </summary>
        </member>
        <member name="T:Starcounter.Server.PublicModel.ErrorInfo">
            <summary>
            An <see cref="T:Starcounter.Server.PublicModel.ErrorInfo"/> can be converted to a <see cref="T:Starcounter.Internal.ErrorMessage"/>
            by calling <see cref="M:Starcounter.Server.PublicModel.ErrorInfo.ToErrorMessage"/> and from this, various
            error related properties - including the full message - can be
            extracted and utilized by consumers (e.g. normally client management
            applications).
            </summary>
        </member>
        <member name="F:Starcounter.Server.PublicModel.ErrorInfo.FullMessagePrefix">
            <summary>
            Prefix used when an <see cref="T:Starcounter.Server.PublicModel.ErrorInfo"/> represent a message
            already properly created.
            </summary>
        </member>
        <member name="F:Starcounter.Server.PublicModel.ErrorInfo.MessagePostfixPrefix">
            <summary>
            Prefix used when an <see cref="T:Starcounter.Server.PublicModel.ErrorInfo"/> contains a given
            postfix, usually specified on the server, that needs to travel
            accross the wire.
            </summary>
        </member>
        <member name="M:Starcounter.Server.PublicModel.ErrorInfo.GetSortedErrorMessages(Starcounter.Server.PublicModel.ErrorInfo[])">
            <summary>
            Enumerates over all error messages constructed from the given array
            of <see cref="T:Starcounter.Server.PublicModel.ErrorInfo"/> instances, sorted from the most relevant
            to the outermost one.
            </summary>
            <param name="errors">Errors to iterate.</param>
            <returns>A enumerable collection with sorted error messages.</returns>
        </member>
        <member name="M:Starcounter.Server.PublicModel.ErrorInfo.FromException(System.Exception)">
            <summary>
            Creates a <see cref="T:Starcounter.Server.PublicModel.ErrorInfo"/> from an exception.
            Normally used on the server to create error information
            objects that need to travel across the wire to a client
            where they can be recreated.
            </summary>
            <param name="e">
            The <see cref="T:System.Exception"/> from which we should create
            an <see cref="T:Starcounter.Server.PublicModel.ErrorInfo"/> instance.</param>
            <returns>An <see cref="T:Starcounter.Server.PublicModel.ErrorInfo"/> instance representing
            the given exception.</returns>
        </member>
        <member name="M:Starcounter.Server.PublicModel.ErrorInfo.FromErrorCode(System.UInt32)">
            <summary>
            Creates a <see cref="T:Starcounter.Server.PublicModel.ErrorInfo"/> from an error code.
            Normally used on the server to create error information
            objects that need to travel across the wire to a client
            where they can be recreated.
            </summary>
            <param name="errorCode">The code from which we should
            create an <see cref="T:Starcounter.Server.PublicModel.ErrorInfo"/> instance.</param>
            <returns>
            An <see cref="T:Starcounter.Server.PublicModel.ErrorInfo"/> instance representing the
            given error code.
            </returns>
        </member>
        <member name="M:Starcounter.Server.PublicModel.ErrorInfo.FromErrorCode(System.UInt32,System.String)">
            <summary>
            Creates a <see cref="T:Starcounter.Server.PublicModel.ErrorInfo"/> from an error code.
            Normally used on the server to create error information
            objects that need to travel across the wire to a client
            where they can be recreated.
            </summary>
            <param name="errorCode">The code from which we should
            create an <see cref="T:Starcounter.Server.PublicModel.ErrorInfo"/> instance.</param>
            <param name="postfix">A message postfix.</param>
            <returns>
            An <see cref="T:Starcounter.Server.PublicModel.ErrorInfo"/> instance representing the
            given error code.
            </returns>
        </member>
        <member name="M:Starcounter.Server.PublicModel.ErrorInfo.FromErrorCode(System.UInt32,System.String,System.String[])">
            <summary>
            Creates a <see cref="T:Starcounter.Server.PublicModel.ErrorInfo"/> from an error code.
            Normally used on the server to create error information
            objects that need to travel across the wire to a client
            where they can be recreated.
            </summary>
            <param name="errorCode">The code from which we should
            create an <see cref="T:Starcounter.Server.PublicModel.ErrorInfo"/> instance.</param>
            <param name="postfix">A message postfix.</param>
            <param name="arguments">Message arguments to be inserted
            to the message.</param>
            <returns>
            An <see cref="T:Starcounter.Server.PublicModel.ErrorInfo"/> instance representing the
            given error code.
            </returns>
        </member>
        <member name="M:Starcounter.Server.PublicModel.ErrorInfo.#ctor">
            <summary>
            Deserialization constructor.
            </summary>
        </member>
        <member name="M:Starcounter.Server.PublicModel.ErrorInfo.#ctor(System.String,System.String[])">
            <summary>
            Initializes a new <see cref="T:Starcounter.Server.PublicModel.ErrorInfo"/>.
            </summary>
            <param name="errorCode">Error code.</param>
            <param name="arguments">Arguments. These arguments can be used to format
            the human-readable error message on the client; they can also be used
            by the client to implement repair actions.</param>
        </member>
        <member name="M:Starcounter.Server.PublicModel.ErrorInfo.#ctor(System.UInt32,System.String[])">
            <summary>
            Initializes a new <see cref="T:Starcounter.Server.PublicModel.ErrorInfo"/>.
            </summary>
            <param name="errorCode">Error code.</param>
            <param name="arguments">Arguments. These arguments can be used to format
            the human-readable error message on the client; they can also be used
            by the client to implement repair actions.</param>
        </member>
        <member name="P:Starcounter.Server.PublicModel.ErrorInfo.ErrorId">
            <summary>
            Gets or sets the error id.
            </summary>
        </member>
        <member name="P:Starcounter.Server.PublicModel.ErrorInfo.Arguments">
            <summary>
            Gets or sets the error arguments. These arguments can be used to format
            the human-readable error message on the client; they can also be used
            by the client to implement repair actions.
            </summary>
        </member>
        <member name="M:Starcounter.Server.PublicModel.ErrorInfo.ToErrorMessage">
            <summary>
            Converts the current <see cref="T:Starcounter.Server.PublicModel.ErrorInfo"/> to an <see cref="T:Starcounter.Internal.ErrorMessage"/>.
            </summary>
            <returns>
            An <see cref="T:Starcounter.Internal.ErrorMessage"/> instance representing the error encapsulated
            by the current instance.
            </returns>
        </member>
        <member name="M:Starcounter.Server.PublicModel.ErrorInfo.TryGetErrorCode(System.UInt32@)">
            <summary>
            Tries to retrieve the underlying error code for the current
            instance.
            </summary>
            <param name="code">The error code, if the current instance
            was based on such.</param>
            <returns>True if an underlying error code could be retreived;
            false otherwise.</returns>
        </member>
        <member name="T:Starcounter.Server.PublicModel.ErrorInfoExtensions">
            <summary>
            Expose a set of utility/extension methods making it easier to work
            with <see cref="T:Starcounter.Server.PublicModel.ErrorInfo"/> instances, either in single form and as
            collections in the form they are normally produced by the server.
            </summary>
        </member>
        <member name="M:Starcounter.Server.PublicModel.ErrorInfoExtensions.PickSingleServerError(Starcounter.Server.PublicModel.ErrorInfo[])">
            <summary>
            Picks the most appropriate single reason error from a set of
            errors, based on the server error reporting convention.
            </summary>
            <param name="errors">Set of errors to pick the most appropriate
            one from.</param>
            <returns>A single reason error.</returns>
        </member>
        <member name="M:Starcounter.Server.PublicModel.ErrorInfoExtensions.TryGetSingleReasonError(System.UInt32,Starcounter.Server.PublicModel.ErrorInfo[],Starcounter.Server.PublicModel.ErrorInfo@)">
            <summary>
            Tries getting a single reason error from a given set of
            errors. The error is considered single reason if either
            it's the sole entry in the given list, OR if the list
            contains exactly two entries and the first (index 0) entry
            is based on an error code equal to <paramref name="aggregateErrorCode"/>.
            </summary>
            <param name="aggregateErrorCode">The aggregate error code
            allowed. Pass <see cref="F:System.UInt32.MaxValue"/> to allow any code.
            </param>
            <param name="errors">The set of errors to inspect.</param>
            <param name="info">The <see cref="T:Starcounter.Server.PublicModel.ErrorInfo"/> returned if
            a single reason error was in fact found.</param>
            <returns>True if the method could extract a single reason
            error from the given set of errors; false otherwise.</returns>
        </member>
        <member name="M:Starcounter.Server.PublicModel.ErrorInfoExtensions.TryGetSingleReasonErrorBasedOnServerConvention(Starcounter.Server.PublicModel.ErrorInfo[],Starcounter.Server.PublicModel.ErrorInfo@)">
            <summary>
            Tries to get a single reason code from the given set of errors,
            assuming the aggregate error is the one normally used by the server
            when executing command processors that fails. Internally calls
            <see cref="M:Starcounter.Server.PublicModel.ErrorInfoExtensions.TryGetSingleReasonError(System.UInt32,Starcounter.Server.PublicModel.ErrorInfo[],Starcounter.Server.PublicModel.ErrorInfo@)"/> with the commonly used error
            code used by the server.
            </summary>
            <param name="errors">The set of errors to inspect.</param>
            <param name="info">The <see cref="T:Starcounter.Server.PublicModel.ErrorInfo"/> returned if
            a single reason error was in fact found.</param>
            <returns>True if the method could extract a single reason
            error from the given set of errors; false otherwise.</returns>
        </member>
        <member name="M:Starcounter.Server.PublicModel.ErrorInfoExtensions.TryGetSingleReasonErrorAggregatedInAny(Starcounter.Server.PublicModel.ErrorInfo[],Starcounter.Server.PublicModel.ErrorInfo@)">
            <summary>
            Tries to get a single reason code from the given set of errors,
            allowing any error code as the aggregate error. Internally calls
            <see cref="M:Starcounter.Server.PublicModel.ErrorInfoExtensions.TryGetSingleReasonError(System.UInt32,Starcounter.Server.PublicModel.ErrorInfo[],Starcounter.Server.PublicModel.ErrorInfo@)"/>.
            </summary>
            <param name="errors">The set of errors to inspect.</param>
            <param name="info">The <see cref="T:Starcounter.Server.PublicModel.ErrorInfo"/> returned if
            a single reason error was in fact found.</param>
            <returns>True if the method could extract a single reason
            error from the given set of errors; false otherwise.</returns>
        </member>
        <member name="M:Starcounter.Server.PublicModel.ErrorInfoExtensions.GetErrorCode(Starcounter.Server.PublicModel.ErrorInfo)">
            <summary>
            Gets the error code behind the <see cref="T:Starcounter.Server.PublicModel.ErrorInfo"/> if there
            is one, and <see cref="F:Starcounter.Error.SCERRUNSPECIFIED"/> if not.
            </summary>
            <param name="info">The <see cref="T:Starcounter.Server.PublicModel.ErrorInfo"/> whos code to
            return.</param>
            <returns>The error code as specified in the summary.</returns>
        </member>
        <member name="T:Starcounter.Server.PublicModel.IServerRuntime">
            <summary>
            Defines the core runtime API to be used by hosts when
            interacting with a running <see cref="T:Starcounter.Server.ServerEngine"/>.
            </summary>
        </member>
        <member name="P:Starcounter.Server.PublicModel.IServerRuntime.Functionality">
            <summary>
            Returns the functionality supported by the running
            server, in the form of a set of <see cref="T:Starcounter.Server.PublicModel.CommandDescriptor"/>
            instances.
            </summary>
        </member>
        <member name="M:Starcounter.Server.PublicModel.IServerRuntime.Execute(Starcounter.Server.PublicModel.Commands.ServerCommand,System.Predicate{Starcounter.Server.PublicModel.CommandId},System.Action{Starcounter.Server.PublicModel.CommandId})">
            <summary>
            Executes the given <see cref="T:Starcounter.Server.PublicModel.Commands.ServerCommand"/>.
            </summary>
            <remarks>
            Execution of server commands are always asynchronous, meaning
            this call will return when some basic validation has occured
            and the returned value will represent the state of the command
            just after it has been enqueued. To find it the result of the
            completed command, use <see cref="M:Starcounter.Server.PublicModel.IServerRuntime.Wait(Starcounter.Server.PublicModel.CommandId)"/>, <see cref="M:Starcounter.Server.PublicModel.IServerRuntime.Wait(Starcounter.Server.PublicModel.CommandInfo)"/>
            or use <see cref="M:Starcounter.Server.PublicModel.IServerRuntime.GetCommand(Starcounter.Server.PublicModel.CommandId)"/> to get the latest snapshot of
            the command state.
            </remarks>
            <param name="command">The <see cref="T:Starcounter.Server.PublicModel.Commands.ServerCommand"/>
            to execute.</param>
            <param name="cancellationPredicate">Optional predicate that can be used to
            pass in a method that have the right to authorize cancellation of
            the executing command during processing.</param>
            <param name="completionCallback">Optional callback that will be invoked
            when the executed command completes.
            </param>
            <returns>A <see cref="T:Starcounter.Server.PublicModel.CommandInfo"/> representing the state of
            the command.</returns>
        </member>
        <member name="M:Starcounter.Server.PublicModel.IServerRuntime.Wait(Starcounter.Server.PublicModel.CommandInfo)">
            <summary>
            Waits for the server command represented by the given
            <see cref="T:Starcounter.Server.PublicModel.CommandInfo"/> to complete.
            </summary>
            <param name="info">The <see cref="T:Starcounter.Server.PublicModel.CommandInfo"/> representing
            the command to wait for.</param>
            <returns>A <see cref="T:Starcounter.Server.PublicModel.CommandInfo"/> representing the state
            of the command after it has finished.</returns>
        </member>
        <member name="M:Starcounter.Server.PublicModel.IServerRuntime.Wait(Starcounter.Server.PublicModel.CommandId)">
            <summary>
            Waits for the server command represented by the given
            <see cref="T:Starcounter.Server.PublicModel.CommandId"/> to complete.
            </summary>
            <param name="id">The <see cref="T:Starcounter.Server.PublicModel.CommandId"/> of the command
            to wait for.</param>
            <returns>A <see cref="T:Starcounter.Server.PublicModel.CommandInfo"/> representing the state
            of the command after it has finished.</returns>
        </member>
        <member name="M:Starcounter.Server.PublicModel.IServerRuntime.GetCommand(Starcounter.Server.PublicModel.CommandId)">
            <summary>
            Gets a snapshot of the latest state of the command
            represented by the given <see cref="T:Starcounter.Server.PublicModel.CommandId"/>.
            </summary>
            <remarks>
            Command information stays available only for a certain
            time, after which information is abandoned by the server.
            </remarks>
            <param name="id">The <see cref="T:Starcounter.Server.PublicModel.CommandId"/> holding the
            identity of the command whose state we want to retrieve.
            </param>
            <returns>A <see cref="T:Starcounter.Server.PublicModel.CommandInfo"/> representing the state of
            the given command.</returns>
        </member>
        <member name="M:Starcounter.Server.PublicModel.IServerRuntime.GetCommands">
            <summary>
            Gets a snapshot of the latest state of all commands
            currently being references by the server. This list
            can include commands pending, commands currently being
            executed and commands that has finished executing.
            </summary>
            <returns>An array of <see cref="T:Starcounter.Server.PublicModel.CommandInfo"/> representing
            the state of all commands.</returns>
        </member>
        <member name="M:Starcounter.Server.PublicModel.IServerRuntime.GetServerInfo">
            <summary>
            Gets the state of the principal server.
            </summary>
            <returns>A <see cref="T:Starcounter.Server.PublicModel.ServerInfo"/> representing a snapshot
            of the servers current state.</returns>
        </member>
        <member name="M:Starcounter.Server.PublicModel.IServerRuntime.GetDatabase(System.String)">
            <summary>
            Gets a database, represented by a <see cref="T:Starcounter.Server.PublicModel.DatabaseInfo"/>,
            by it's URI.
            </summary>
            <param name="uri">The URI of the database to retreive.</param>
            <returns>A <see cref="T:Starcounter.Server.PublicModel.DatabaseInfo"/> representing a snapshot
            of the databases current state.</returns>
        </member>
        <member name="M:Starcounter.Server.PublicModel.IServerRuntime.GetDatabaseByName(System.String)">
            <summary>
            Gets a database, represented by a <see cref="T:Starcounter.Server.PublicModel.DatabaseInfo"/>,
            by it's name.
            </summary>
            <param name="name">The name of the database to retreive.</param>
            <returns>A <see cref="T:Starcounter.Server.PublicModel.DatabaseInfo"/> representing a snapshot
            of the databases current state.</returns>
        </member>
        <member name="M:Starcounter.Server.PublicModel.IServerRuntime.GetDatabases">
            <summary>
            Gets all databases, represented by their <see cref="T:Starcounter.Server.PublicModel.DatabaseInfo"/>,
            from the executing server.
            </summary>
            <returns>A <see cref="T:Starcounter.Server.PublicModel.DatabaseInfo"/> representing a snapshot
            of the current state for each database maintained by the server
            being queried.</returns>
        </member>
        <member name="M:Starcounter.Server.PublicModel.IServerRuntime.GetDatabaseConfiguration(System.String)">
            <summary>
            Get database configuration
            </summary>
            <param name="databaseName"></param>
            <returns></returns>
        </member>
        <member name="T:Starcounter.Server.PublicModel.ProgressInfo">
            <summary>
            Represents the progress of a task, executing to fullfill the
            execution of a <see cref="T:Starcounter.Server.PublicModel.Commands.ServerCommand"/>.
            </summary>
        </member>
        <member name="M:Starcounter.Server.PublicModel.ProgressInfo.#ctor">
            <summary>
            Deserialization constructor.
            </summary>
        </member>
        <member name="M:Starcounter.Server.PublicModel.ProgressInfo.#ctor(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Initializes a new <see cref="T:Starcounter.Server.PublicModel.ProgressInfo" />.
            </summary>
            <param name="taskID">The task ID.</param>
            <param name="value">The value.</param>
            <param name="maximum">The maximum.</param>
            <param name="text">The text.</param>
            <remarks>
            The <paramref name="value"/> parameter can not have a value
            equal to <see cref="F:System.Int32.MinValue"/>. This value is reserved
            by the implementation and will result in the raising of a
            <see cref="T:System.ArgumentOutOfRangeException"/>.
            </remarks>
        </member>
        <member name="P:Starcounter.Server.PublicModel.ProgressInfo.TaskIdentity">
            <summary>
            Identity of the well-known command sub-task that has made progress,
            or a pseudo number according to protocol.
            </summary>
        </member>
        <member name="P:Starcounter.Server.PublicModel.ProgressInfo.Value">
            <summary>
            Progress value.
            </summary>
            This property can not be set to a value equal to
            <see cref="F:System.Int32.MinValue"/>. This value is reserved
            by the implementation and will result in the raising
            of a <see cref="T:System.ArgumentOutOfRangeException"/>.
        </member>
        <member name="P:Starcounter.Server.PublicModel.ProgressInfo.Maximum">
            <summary>
            Progress maximum, if known.
            </summary>
        </member>
        <member name="P:Starcounter.Server.PublicModel.ProgressInfo.Text">
            <summary>
            Progress Text.
            </summary>
        </member>
        <member name="M:Starcounter.Server.PublicModel.ProgressInfo.Cancel">
            <summary>
            Marks this progress as cancelled.
            </summary>
        </member>
        <member name="P:Starcounter.Server.PublicModel.ProgressInfo.WasCancelled">
            <summary>
            Gets a value indicating if the progress has stopped because
            the task embracing it was cancelled.
            </summary>
        </member>
        <member name="P:Starcounter.Server.PublicModel.ProgressInfo.IsCompleted">
            <summary>
            Gets a value indicating if the current progess record indicates
            the task which it representes is completed.
            </summary>
        </member>
        <member name="T:Starcounter.Server.PublicModel.ServerInfo">
            <summary>
            Represents a snapshot of the public state of a server.
            </summary>
        </member>
        <member name="M:Starcounter.Server.PublicModel.ServerInfo.#ctor">
            <summary>
            Initializes a <see cref="T:Starcounter.Server.PublicModel.ServerInfo"/> message object.
            </summary>
        </member>
        <member name="P:Starcounter.Server.PublicModel.ServerInfo.Uri">
            <summary>
            Gets the URI of the server.
            </summary>
            <remarks>
            The URI is a logical URI of type <see cref="F:Starcounter.ScUriKind.Server"/>
            </remarks>
        </member>
        <member name="P:Starcounter.Server.PublicModel.ServerInfo.Configuration">
            <summary>
            Configuration of the server.
            </summary>
        </member>
        <member name="P:Starcounter.Server.PublicModel.ServerInfo.IsMonitoringSupported">
            <summary>
            Gets a value indicating if monitoring is supported
            by this server.
            </summary>
        </member>
        <member name="P:Starcounter.Server.PublicModel.ServerInfo.DefaultTransactionLogSize">
            <summary>
            The servers default transaction log size, used when creating
            databases if no maximum size is explicitly given.
            </summary>
        </member>
        <member name="P:Starcounter.Server.PublicModel.ServerInfo.UserName">
            <summary>
            Gets or sets the user name the server represented by the
            current information object runs under.
            </summary>
        </member>
        <member name="P:Starcounter.Server.PublicModel.ServerInfo.ServerConfigurationPath">
            <summary>
            The full path to the server configuration file whose
            database repository this server maintains.
            </summary>
        </member>
        <member name="T:Starcounter.Server.PublicModel.TaskDuration">
            <summary>
            Denotes a duration of a task.
            </summary>
        </member>
        <member name="F:Starcounter.Server.PublicModel.TaskDuration.Unknown">
            <summary>
            The duration can't even be estimated.
            </summary>
        </member>
        <member name="F:Starcounter.Server.PublicModel.TaskDuration.UnknownWithProgress">
            <summary>
            Indicates the duration is currently hard to predict or we have
            no reason to try. But we can still report progress, for example
            a ticker (e.g. updated every tenth of a second).
            </summary>
        </member>
        <member name="F:Starcounter.Server.PublicModel.TaskDuration.ShortIndeterminate">
            <summary>
            Short and indeterminate task. Typically finished within
            a second.
            </summary>
        </member>
        <member name="F:Starcounter.Server.PublicModel.TaskDuration.NormalIndeterminate">
            <summary>
            Normmal indeterminate task. A normal duration of a task
            executing as part of a command is typically running in a
            couple of seconds.
            </summary>
        </member>
        <member name="F:Starcounter.Server.PublicModel.TaskDuration.LongIndeterminate">
            <summary>
            A long inderminate task.
            </summary>
        </member>
        <member name="F:Starcounter.Server.PublicModel.TaskDuration.LongWithProgress">
            <summary>
            A long task, that eventually will report progress. The
            ending of the task this duration applies to is indeterminate
            though.
            </summary>
        </member>
        <member name="F:Starcounter.Server.PublicModel.TaskDuration.LongWithFixedProgress">
            <summary>
            A long task, with fixed progress, i.e. we can provide a
            max value.
            </summary>
        </member>
        <member name="M:Starcounter.Server.PublicModel.TaskDurationExtensions.IsProgressing(Starcounter.Server.PublicModel.TaskDuration)">
            <summary>
            Returns a value indicating if the current duration is one
            that denotes a task that reports progress.
            </summary>
            <param name="duration">The duration</param>
            <returns></returns>
        </member>
        <member name="M:Starcounter.Server.PublicModel.TaskDurationExtensions.IsDeterminate(Starcounter.Server.PublicModel.TaskDuration)">
            <summary>
            Gets a value indicating if the given duration is determinate,
            i.e. it has a determined and specified maximum value.
            </summary>
            <param name="duration">The duration</param>
            <returns></returns>
        </member>
        <member name="T:Starcounter.Server.Database">
            <summary>
            A database maintained by a certain server (represented by
            the <see cref="F:Starcounter.Server.Database.Server"/> property).
            </summary>
        </member>
        <member name="F:Starcounter.Server.Database.Server">
            <summary>
            The server to which this database belongs.
            </summary>
        </member>
        <member name="F:Starcounter.Server.Database.Configuration">
            <summary>
            The configuration of this <see cref="T:Starcounter.Server.Database"/>.
            </summary>
        </member>
        <member name="F:Starcounter.Server.Database.Name">
            <summary>
            Gets the simple name of this database.
            </summary>
        </member>
        <member name="F:Starcounter.Server.Database.Uri">
            <summary>
            Gets the URI of this database.
            </summary>
        </member>
        <member name="P:Starcounter.Server.Database.CodeHostArguments">
            <summary>
            Gets or sets a value representing the exact command-line
            arguments string what was used to start the host.
            </summary>
        </member>
        <member name="P:Starcounter.Server.Database.CodeHostErrorOutput">
            <summary>
            Gets or sets the error output buffer, containing all error
            output that has been captured from the code host process
            currently attached to this database.
            </summary>
        </member>
        <member name="P:Starcounter.Server.Database.BadAutoRestartCount">
            <summary>
            Gets or sets the counter used to determine when automatic restart
            no longer is viable on failure.
            </summary>
        </member>
        <member name="P:Starcounter.Server.Database.LastAutoRestartTime">
            <summary>
            Gets or sets a value indicating the last time an automatic restart
            was triggered.
            </summary>
        </member>
        <member name="P:Starcounter.Server.Database.ExecutableBasePath">
            <summary>
            Gets the base directory where this database stores and runs
            executables from.
            </summary>
        </member>
        <member name="P:Starcounter.Server.Database.Apps">
            <summary>
            Gets or sets the list of Apps currently known to the
            database represented by this instance.
            </summary>
        </member>
        <member name="P:Starcounter.Server.Database.db_uuid">
            <summary>
            Gets or sets the instance ID connected with the
            current database.
            </summary>
        </member>
        <member name="M:Starcounter.Server.Database.#ctor(Starcounter.Server.ServerEngine,Starcounter.Advanced.Configuration.DatabaseConfiguration)">
            <summary>
            Intializes a <see cref="T:Starcounter.Server.Database"/>.
            </summary>
            <param name="server">The server to which the current database belong.</param>
            <param name="configuration">The configuration applied.</param>
        </member>
        <member name="M:Starcounter.Server.Database.ToPublicModel">
            <summary>
            Creates a snapshot of this <see cref="T:Starcounter.Server.Database"/> in the
            form of a public model <see cref="T:Starcounter.Server.PublicModel.DatabaseInfo"/>.
            </summary>
            <returns>A <see cref="T:Starcounter.Server.PublicModel.DatabaseInfo"/> representing the current state
            of this database.</returns>
        </member>
        <member name="M:Starcounter.Server.Database.GetRunningCodeHostProcess">
            <summary>
            Gets the worker process associated with the current <see cref="T:Starcounter.Server.Database"/>
            or NULL if not started or it has exited.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Starcounter.Server.DatabaseDefaults">
            <summary>
            Represents database default values for a given server.
            </summary>
        </member>
        <member name="F:Starcounter.Server.DatabaseDefaults.StaticDefaultCollationFile">
            <summary>
            The static default collation file, used when either no configuration
            not a platform-dependent value can be retreived.
            </summary>
        </member>
        <member name="P:Starcounter.Server.DatabaseDefaults.TransactionLogSize">
            <summary>
            Gets the default transaction log size to use.
            </summary>
        </member>
        <member name="P:Starcounter.Server.DatabaseDefaults.CollationFile">
            <summary>
            Gets the default collation file to use.
            </summary>
        </member>
        <member name="M:Starcounter.Server.DatabaseDefaults.Update(Starcounter.Advanced.Configuration.ServerConfiguration)">
            <summary>
            Updates the defaults based on the given <see cref="T:Starcounter.Advanced.Configuration.ServerConfiguration"/>.
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="T:Starcounter.Server.DatabaseEngine">
            <summary>
            Encapsulates and abstracts the database engine, i.e. letting code
            using this class act on the database engine without having to know
            the exact underlying details about how to actually start it or
            what exact input to use.
            </summary>
        </member>
        <member name="F:Starcounter.Server.DatabaseEngine.ScCodeEvents.OnlineBaseName">
            <summary>
            The base name used for the event signaled by the code
            host when it's services are considered available.
            </summary>
        </member>
        <member name="F:Starcounter.Server.DatabaseEngine.Server">
            <summary>
            Gets the server that has instantiated this engine.
            </summary>
        </member>
        <member name="F:Starcounter.Server.DatabaseEngine.Monitor">
            <summary>
            Gets the database engine monitor service
            </summary>
        </member>
        <member name="P:Starcounter.Server.DatabaseEngine.DatabaseExePath">
            <summary>
            Gets the full path to the database executable.
            </summary>
        </member>
        <member name="P:Starcounter.Server.DatabaseEngine.CodeHostExePath">
            <summary>
            Gets the full path to the code host executable.
            </summary>
        </member>
        <member name="M:Starcounter.Server.DatabaseEngine.#ctor(Starcounter.Server.ServerEngine)">
            <summary>
            Initializes a <see cref="T:Starcounter.Server.DatabaseEngine"/> for the given
            <see cref="T:Starcounter.Server.ServerEngine"/>.
            </summary>
            <param name="server"></param>
        </member>
        <member name="M:Starcounter.Server.DatabaseEngine.Setup">
            <summary>
            Performs setup of the current <see cref="T:Starcounter.Server.DatabaseEngine"/>.
            </summary>
        </member>
        <member name="M:Starcounter.Server.DatabaseEngine.StartDatabaseProcess(Starcounter.Server.Database)">
            <summary>
            Starts the database process for the given <see cref="T:Starcounter.Server.Database"/>.
            If it turns out already started, this method silently returns.
            </summary>
            <param name="database">The <see cref="T:Starcounter.Server.Database"/> the starting
            process should run.</param>
            <returns>Returns true if the database was actually started, false
            if it was not (i.e. it was already running).</returns>
        </member>
        <member name="M:Starcounter.Server.DatabaseEngine.StopDatabaseProcess(Starcounter.Server.Database)">
            <summary>
            Stops the database process for the given <see cref="T:Starcounter.Server.Database"/>.
            If it turns out already stopped, this method silently returns.
            </summary>
            <param name="database">The <see cref="T:Starcounter.Server.Database"/> the stopping
            process runs.</param>
            <returns>Returns true if the database was actually stopped, false
            if it was not (i.e. it was not running).</returns>
        </member>
        <member name="T:Starcounter.Server.PublicModelProvider">
            <summary>
            Provides access to the public model in a thread-safe manner.
            </summary>
        </member>
        <member name="P:Starcounter.Server.PublicModelProvider.ServerInfo">
            <summary>
            Gets the current snapshot of server information.
            </summary>
        </member>
        <member name="M:Starcounter.Server.PublicModelProvider.#ctor(Starcounter.Server.ServerEngine)">
            <summary>
            Initializes the public model from the given server.
            </summary>
            <param name="engine">The <see cref="T:Starcounter.Server.ServerEngine"/> maintaining
            the current model.</param>
        </member>
        <member name="M:Starcounter.Server.PublicModelProvider.UpdateServerInfo(Starcounter.Server.ServerEngine)">
            <summary>
            Updates the <see cref="P:Starcounter.Server.PublicModelProvider.ServerInfo"/> of the public model.
            </summary>
            <param name="engine">The <see cref="T:Starcounter.Server.ServerEngine"/> maintaining
            the current model.</param>
        </member>
        <member name="M:Starcounter.Server.PublicModelProvider.AddDatabase(Starcounter.Server.Database)">
            <summary>
            Adds a database to the public model.
            </summary>
            <param name="database">The database whose state
            we are adding to the public model.</param>
            <returns>The representation as it appears in
            the public model.</returns>
        </member>
        <member name="M:Starcounter.Server.PublicModelProvider.UpdateDatabase(Starcounter.Server.Database)">
            <summary>
            Updates a database already part of the public model.
            </summary>
            <param name="database">The database whose state
            we are updating in the public model.</param>
            <returns>The representation as it appears in
            the public model.</returns>
        </member>
        <member name="M:Starcounter.Server.PublicModelProvider.RemoveDatabase(Starcounter.Server.Database)">
            <summary>
            Removes a database from the public model.
            </summary>
            <param name="database"></param>
        </member>
        <member name="P:Starcounter.Server.PublicModelProvider.Functionality">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Server.PublicModelProvider.Execute(Starcounter.Server.PublicModel.Commands.ServerCommand,System.Predicate{Starcounter.Server.PublicModel.CommandId},System.Action{Starcounter.Server.PublicModel.CommandId})">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Server.PublicModelProvider.Wait(Starcounter.Server.PublicModel.CommandInfo)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Server.PublicModelProvider.Wait(Starcounter.Server.PublicModel.CommandId)">
            <inheritdoc />
            <remarks>The implementation of this method is based on
            <see cref="M:System.Threading.Thread.Sleep(System.Int32)"/>, which possibly will be changed
            to use events in a future versions.</remarks>
        </member>
        <member name="M:Starcounter.Server.PublicModelProvider.GetCommand(Starcounter.Server.PublicModel.CommandId)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Server.PublicModelProvider.GetCommands">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Server.PublicModelProvider.GetServerInfo">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Server.PublicModelProvider.GetDatabase(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Server.PublicModelProvider.GetDatabaseByName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Server.PublicModelProvider.GetDatabases">
            <inheritdoc />
        </member>
        <member name="T:Starcounter.Server.ServerHost">
            <summary>
            Represents the host, hosting a server engine.
            </summary>
            <remarks>
            The host is currently configured as part of server engine setup
            and can not be accessed from hosting programs themselves.
            </remarks>
        </member>
        <member name="F:Starcounter.Server.ServerHost.Log">
            <summary>
            References a log source designed to be used by server hosts
            that want to log server-related information occuring outside
            the actual engine.
            </summary>
        </member>
        <member name="M:Starcounter.Server.ServerHost.Configure(Starcounter.Advanced.Configuration.ServerConfiguration)">
            <summary>
            Configures the host using the content as specified in the given
            <see cref="T:Starcounter.Advanced.Configuration.ServerConfiguration"/>.
            </summary>
            <param name="configuration">The configuration to turn to when
            configuring the host needs a configurable value.</param>
        </member>
        <member name="T:Starcounter.Server.ServerLogNames">
            <summary>
            Defines the names of well known server log sources.
            </summary>
        </member>
        <member name="F:Starcounter.Server.ServerLogNames.Default">
            <summary>
            Gets the name of the default log source.
            </summary>
        </member>
        <member name="F:Starcounter.Server.ServerLogNames.Processes">
            <summary>
            Gets the name of the process monitor log source.
            </summary>
        </member>
        <member name="F:Starcounter.Server.ServerLogNames.Commands">
            <summary>
            Gets the name of the command processing log source.
            </summary>
        </member>
        <member name="F:Starcounter.Server.ServerLogNames.Weaver">
            <summary>
            Gets the name of the weaver log source.
            </summary>
        </member>
        <member name="T:Starcounter.Server.ServerLogSources">
            <summary>
            Contains references to the log sources used by the server.
            </summary>
        </member>
        <member name="F:Starcounter.Server.ServerLogSources.Default">
            <summary>
            The default server log source.
            </summary>
        </member>
        <member name="F:Starcounter.Server.ServerLogSources.Processes">
            <summary>
            The log source used by the server to log information
            relating to external process management.
            </summary>
        </member>
        <member name="F:Starcounter.Server.ServerLogSources.Commands">
            <summary>
            The log source used by the server to log/trace
            messages that contains information about commands
            being executed (including their child tasks).
            </summary>
        </member>
        <member name="F:Starcounter.Server.ServerLogSources.Weaver">
            <summary>
            The log source used by the server to log/trace
            messages that originates from the weaver process.
            </summary>
        </member>
        <member name="T:Starcounter.Server.ServerEngine">
            <summary>
            Representing the running server, hosted in a server program.
            </summary>
        </member>
        <member name="F:Starcounter.Server.ServerEngine.Name">
            <summary>
            Gets the simple name of the server.
            </summary>
        </member>
        <member name="F:Starcounter.Server.ServerEngine.Uri">
            <summary>
            Gets the URI of this server.
            </summary>
        </member>
        <member name="P:Starcounter.Server.ServerEngine.HostLog">
            <summary>
            Gets a reference to the log source dedicated to the server
            host.
            </summary>
            <remarks>This log source is not available until <see cref="M:Starcounter.Server.ServerEngine.Setup"/>
            has been successfully invoked.</remarks>
        </member>
        <member name="F:Starcounter.Server.ServerEngine.Dispatcher">
            <summary>
            Gets the installed <see cref="T:Starcounter.Server.Commands.CommandDispatcher"/> the current
            engine will utilize when executing commands.
            </summary>
        </member>
        <member name="F:Starcounter.Server.ServerEngine.Configuration">
            <summary>
            Gets the server configuration.
            </summary>
        </member>
        <member name="F:Starcounter.Server.ServerEngine.DatabaseDefaultValues">
            <summary>
            Gets the database default values to be used when creating databases
            and values are not explicitly given.
            </summary>
        </member>
        <member name="F:Starcounter.Server.ServerEngine.DatabaseEngine">
            <summary>
            Gets the <see cref="F:Starcounter.Server.ServerEngine.DatabaseEngine"/> used by the current server.
            </summary>
        </member>
        <member name="F:Starcounter.Server.ServerEngine.GatewayService">
            <summary>
            Gets the <see cref="F:Starcounter.Server.ServerEngine.GatewayService"/> used by the current server.
            </summary>
        </member>
        <member name="P:Starcounter.Server.ServerEngine.DefaultServicePipeName">
            <summary>
            Gets the default name of the pipe the server use for it's
            core services.
            </summary>
        </member>
        <member name="F:Starcounter.Server.ServerEngine.InstallationDirectory">
            <summary>
            Gets the Starcounter installation directory.
            </summary>
        </member>
        <member name="P:Starcounter.Server.ServerEngine.TempDirectory">
            <summary>
            Gets the full path of the temporary directory decided and resolved
            when the server started.
            </summary>
        </member>
        <member name="P:Starcounter.Server.ServerEngine.DatabaseDirectory">
            <summary>
            Gets the full path of the database directory decided and resolved
            when the server started.
            </summary>
        </member>
        <member name="P:Starcounter.Server.ServerEngine.Databases">
            <summary>
            Gets the dictionary with databases maintained by this server,
            keyed by their name.
            </summary>
        </member>
        <member name="P:Starcounter.Server.ServerEngine.CurrentPublicModel">
            <summary>
            Gets the current public model snapshot of the server and
            it's databases. The public model is updated in a thread-safe
            maner whenever there is a change in any of the internal
            domain state objects (modified by command processors).
            </summary>
        </member>
        <member name="P:Starcounter.Server.ServerEngine.ExecutableService">
            <summary>
            Gets the <see cref="P:Starcounter.Server.ServerEngine.ExecutableService"/> used when the current
            server engine needs operate on executables.
            </summary>
        </member>
        <member name="P:Starcounter.Server.ServerEngine.WeaverService">
            <summary>
            Gets the <see cref="P:Starcounter.Server.ServerEngine.WeaverService"/> used when the current server
            engine will need to weave user code.
            </summary>
        </member>
        <member name="P:Starcounter.Server.ServerEngine.StorageService">
            <summary>
            Gets the <see cref="T:Starcounter.Server.DatabaseStorageService"/> used when the current
            server engine needs to operate on database storage files.
            </summary>
        </member>
        <member name="P:Starcounter.Server.ServerEngine.DatabaseHostService">
            <summary>
            Gets the <see cref="T:Starcounter.Server.DatabaseHostingService"/> used by this server
            to initiate local communication with database host processes.
            </summary>
        </member>
        <member name="M:Starcounter.Server.ServerEngine.#ctor(System.String,System.String)">
            <summary>
            Initializes a <see cref="T:Starcounter.Server.ServerEngine"/>.
            </summary>
            <param name="serverConfigurationPath">Path to the server configuration
            file in the root of the server repository the engine will run.</param>
            <param name="installDir">Path to the installation directory.</param>
        </member>
        <member name="M:Starcounter.Server.ServerEngine.Setup">
            <summary>
            Executes setup of the current engine.
            </summary>
        </member>
        <member name="M:Starcounter.Server.ServerEngine.Start">
            <summary>
            Starts the current engine, meaning all built-in services of the
            engine will get the chance to start.
            </summary>
            <remarks>
            This call is not blocking; after all built-in services has been
            started, control is returned to the host.
            </remarks>
            <returns>
            A reference to an implementation of <see cref="T:Starcounter.Server.PublicModel.IServerRuntime"/>
            allowing the host to interact with the now running server.
            </returns>
        </member>
        <member name="M:Starcounter.Server.ServerEngine.Stop">
            <summary>
            Stops the current engine, meaning all built-in services of the
            engine will get a request to stop.
            </summary>
        </member>
        <member name="M:Starcounter.Server.ServerEngine.ToPublicModel">
            <summary>
            Creates a snapshot of this <see cref="T:Starcounter.Server.ServerEngine"/> in the
            form of a public model <see cref="T:Starcounter.Server.PublicModel.ServerInfo"/>.
            </summary>
            <returns>A <see cref="T:Starcounter.Server.PublicModel.ServerInfo"/> representing the current state
            of this server.</returns>
        </member>
        <member name="T:Starcounter.Server.ToolInvocationException">
            <summary>
            Exception thrown by <see cref="T:Starcounter.Server.ToolInvocationHelper"/> when an external process
            dot not complete successfully.
            </summary>
        </member>
        <member name="M:Starcounter.Server.ToolInvocationException.#ctor(Starcounter.Server.ToolInvocationResult)">
            <summary>
            Initializes a new <see cref="T:Starcounter.Server.ToolInvocationException"/>
            and builds the error message from a <see cref="T:Starcounter.Server.ToolInvocationResult"/>.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:Starcounter.Server.ToolInvocationException.#ctor">
            <summary>
            Initializes a new <see cref="T:Starcounter.Server.ToolInvocationException"/>.
            </summary>
        </member>
        <member name="M:Starcounter.Server.ToolInvocationException.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Starcounter.Server.ToolInvocationException"/> and specifies the
            exception message.
            </summary>
            <param name="message">Exception message.</param>
        </member>
        <member name="M:Starcounter.Server.ToolInvocationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new <see cref="T:Starcounter.Server.ToolInvocationException"/> and specifies
            the exception message and an inner <see cref="T:System.Exception"/>.
            </summary>
            <param name="message">Exception message.</param>
            <param name="inner">The inner <see cref="T:System.Exception"/>.</param>
        </member>
        <member name="P:Starcounter.Server.ToolInvocationException.ExitCode">
            <summary>
            Gets the process exit code.
            </summary>
        </member>
        <member name="P:Starcounter.Server.ToolInvocationException.Result">
            <summary>
            Gets the <see cref="T:Starcounter.Server.ToolInvocationResult"/> for exceptions
            that stem from such.
            </summary>
        </member>
        <member name="T:Starcounter.Server.ToolInvocationHelper">
            <summary>
            Utility class exposing a set of methods aiding in the invocation
            of external processes ("tools").
            </summary>
        </member>
        <member name="E:Starcounter.Server.ToolInvocationHelper.ToolCompleted">
            <summary>
            Event raised when a tool has completed.
            </summary>
        </member>
        <member name="M:Starcounter.Server.ToolInvocationHelper.InvokeTool(System.Diagnostics.ProcessStartInfo)">
            <summary>
            Invokes an external process and throws a <see cref="T:Starcounter.Server.ToolInvocationException"/>
            if the process does not return with the exit code 0.
            </summary>
            <param name="processStartInfo">A <see cref="T:System.Diagnostics.ProcessStartInfo"/> object
            where properties <see cref="P:System.Diagnostics.ProcessStartInfo.FileName"/> and <see cref="P:System.Diagnostics.ProcessStartInfo.Arguments"/>
            are specified. Other properties should not be specified and may be overwritten by this method.</param>
        </member>
        <member name="M:Starcounter.Server.ToolInvocationHelper.StartTool(System.Diagnostics.Process)">
            <summary>
            Starts an external tool, but does not wait for it to exit.
            </summary>
            <param name="process"></param>
        </member>
        <member name="M:Starcounter.Server.ToolInvocationHelper.WaitForToolToExit(System.Diagnostics.Process)">
            <summary>
            Waits for a <see cref="T:System.Diagnostics.Process"/> to exit and then
            verifies it exited successfully (i.e. with code 0/zero).
            </summary>
            <param name="process">The <see cref="T:System.Diagnostics.Process"/> to wait
            for and verify.</param>
            <remarks>
            If the process exits with another exit code, a <see cref="T:Starcounter.Server.ToolInvocationException"/>
            is raised.
            </remarks>
        </member>
        <member name="M:Starcounter.Server.ToolInvocationHelper.WaitForToolToExit(System.Diagnostics.Process,System.Int32)">
            <summary>
            Waits for a <see cref="T:System.Diagnostics.Process"/> to exit and then
            verifies it exited with the given exit code.
            </summary>
            <param name="process">The <see cref="T:System.Diagnostics.Process"/> to wait
            for and verify.</param>
            <param name="exitCode">The exit code to verify against.</param>
            <remarks>
            If the process exits with another exit code, a <see cref="T:Starcounter.Server.ToolInvocationException"/>
            is raised.
            </remarks>
        </member>
        <member name="M:Starcounter.Server.ToolInvocationHelper.WaitForToolToExit(System.Diagnostics.Process,System.Int32[])">
            <summary>
            Waits for a <see cref="T:System.Diagnostics.Process"/> to exit and then
            verifies it exited with a code represented in the given set of codes.
            </summary>
            <param name="process">The <see cref="T:System.Diagnostics.Process"/> to wait
            for and verify.</param>
            <param name="expectedCodes">List of accepted codes.</param>
            <returns>The exit code, if the code was in the list.</returns>
            <remarks>
            If the process exits with another exit code, a <see cref="T:Starcounter.Server.ToolInvocationException"/>
            is raised.
            </remarks>
        </member>
        <member name="M:Starcounter.Server.ToolInvocationHelper.InvokeTool(System.Diagnostics.ProcessStartInfo,System.Boolean)">
            <summary>
            Invokes an external process.
            </summary>
            <param name="processStartInfo">A <see cref="T:System.Diagnostics.ProcessStartInfo"/> object
            where properties <see cref="P:System.Diagnostics.ProcessStartInfo.FileName"/> and <see cref="P:System.Diagnostics.ProcessStartInfo.Arguments"/>
            are specified. Other properties should not be specified and may be overwritten by this method.</param>
            <param name="checkExitCode"><b>true</b> if the exit code should be checked when the process
            completes (and exception <see cref="T:Starcounter.Server.ToolInvocationException"/> should be thrown if different
            than zero), otherwise <b>false</b>.</param>
            <returns>A <see cref="T:Starcounter.Server.ToolInvocationResult"/> with the process exit code and its
            console output.</returns>
        </member>
        <member name="M:Starcounter.Server.ToolInvocationHelper.FormatExitMessage(System.Diagnostics.Process)">
            <summary>
            Creates an informative exit message from a process that has exited,
            including some startup information and the error message retreived
            when passing the exit code to the shared error code system.
            </summary>
            <remarks>
            The process supplied is assumed to be a Starcounter tool, or any
            other process that return codes that can be mapped to errors in the
            Starcounter error code system. To create a message from another
            process, consult <see cref="M:Starcounter.Server.ToolInvocationHelper.FormatExternalExitMessage(System.Diagnostics.Process)"/>.
            </remarks>
            <example>
            Example output: "scdata.exe -someParameter => SCERR1234: Some error".
            </example>
            <param name="toolProcess">
            The process whose exit we want the message from.</param>
            <returns>A string with information about the process invocation and
            the exit code and exit message.</returns>
        </member>
        <member name="M:Starcounter.Server.ToolInvocationHelper.FormatExternalExitMessage(System.Diagnostics.Process)">
            <summary>
            Creates an informative exit message from a process that has exited,
            including some startup information and the exit code.
            </summary>
            <remarks>
            If the process supplied is a process that return codes that can be
            mapped to errors in the Starcounter error code system, please use
            <see cref="M:Starcounter.Server.ToolInvocationHelper.FormatExitMessage(System.Diagnostics.Process)"/> instead.
            </remarks>
            <example>
            Example output: "devenv.exe -someParameter => Exit code: 123".
            </example>
            <param name="toolProcess">
            The process whose exit we want the message from.</param>
            <returns>A string with information about the process invocation and
            the exit code.</returns>
        </member>
        <member name="T:Starcounter.Server.ToolInvocationResult">
            <summary>
            Result of the <see cref="M:Starcounter.Server.ToolInvocationHelper.InvokeTool(System.Diagnostics.ProcessStartInfo,System.Boolean)"/>
            method. Contains principally the process exit code (<see cref="P:Starcounter.Server.ToolInvocationResult.ExitCode"/> property)
            and its output (<see cref="M:Starcounter.Server.ToolInvocationResult.GetOutput"/>).
            </summary>
        </member>
        <member name="M:Starcounter.Server.ToolInvocationResult.#ctor(System.String,System.String,System.Int32,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new <see cref="T:Starcounter.Server.ToolInvocationResult"/>.
            </summary>
            <param name="fileName">Process file name.</param>
            <param name="arguments">Process arguments.</param>
            <param name="exitCode">Process exit code.</param>
            <param name="standardOut">Standard output of the process to the console.</param>
            <param name="errorOut">Errot output of the process to the console.</param>
        </member>
        <member name="P:Starcounter.Server.ToolInvocationResult.FileName">
            <summary>
            Gets the process file name.
            </summary>
        </member>
        <member name="P:Starcounter.Server.ToolInvocationResult.Arguments">
            <summary>
            Gets the process arguments.
            </summary>
        </member>
        <member name="P:Starcounter.Server.ToolInvocationResult.ExitCode">
            <summary>
            Gets the process exit code.
            </summary>
        </member>
        <member name="M:Starcounter.Server.ToolInvocationResult.GetOutput">
            <summary>
            Gets the output of the process (i.e. what is normally written
            to the console).
            </summary>
            <returns>An array of strings, each element corresponding to one line of output.</returns>
        </member>
        <member name="M:Starcounter.Server.ToolInvocationResult.GetErrorOutput">
            <summary>
            Gets the error output of the process.
            </summary>
            <returns>An array of strings, each element corresponding to one line of output.</returns>
        </member>
        <member name="T:Starcounter.Advanced.Configuration.DatabaseStorageConfiguration">
            <summary>
            Defines a set of properties describing the database storage
            for a given database.
            </summary>
            <remarks>
            <para>
            The principal difference between this configuration and those
            of <see cref="T:Starcounter.Advanced.Configuration.DatabaseConfiguration"/> and <see cref="T:Starcounter.Advanced.Configuration.DatabaseRuntimeConfiguration"/>
            is that the server doesn't maintain these values on disk
            (except for a single, server-global set that defines the
            configured defaults) for every database, simply because they
            are properties of the database image- and log files rather
            than configuration used for maintenance.
            </para>
            <para>
            The properties here correspond closely to those given to the
            database file creation tool (currently scddc.exe).
            </para>
            </remarks>
        </member>
        <member name="P:Starcounter.Advanced.Configuration.DatabaseStorageConfiguration.TransactionLogSize">
            <summary>
            Gets or sets the database transaction log size.
            </summary>
            <remarks>
            Expressed in megabytes.
            </remarks>
        </member>
        <member name="P:Starcounter.Advanced.Configuration.DatabaseStorageConfiguration.CollationFile">
            <summary>
            Gets or sets the collation file used by a certain database
            storage setup.
            </summary>
        </member>
        <member name="P:Starcounter.Advanced.Configuration.DatabaseStorageConfiguration.SupportReplication">
            <summary>
            Gets or sets a value indicating if the storage this configuration
            represents support replication.
            </summary>
        </member>
        <member name="P:Starcounter.Advanced.Configuration.DatabaseStorageConfiguration.FirstObjectID">
            <summary>
            Gets or sets the first object ID allowed.
            </summary>
        </member>
        <member name="P:Starcounter.Advanced.Configuration.DatabaseStorageConfiguration.LastObjectID">
            <summary>
            Gets or sets the last object ID allowed.
            </summary>
        </member>
        <member name="T:Starcounter.Advanced.Configuration.ConfigurationElement">
            <summary>
            Base of all configuration elements.
            </summary>
        </member>
        <member name="F:Starcounter.Advanced.Configuration.ConfigurationElement.Namespace">
            <summary>
            Namespace of elements defined in the current assembly.
            </summary>
        </member>
        <member name="P:Starcounter.Advanced.Configuration.ConfigurationElement.Starcounter#Advanced#Configuration#IConfigurationElement#Parent">
            <inheritdoc />
        </member>
        <member name="P:Starcounter.Advanced.Configuration.ConfigurationElement.Starcounter#Advanced#Configuration#IConfigurationElement#Role">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Advanced.Configuration.ConfigurationElement.Starcounter#Advanced#Configuration#IConfigurationElement#SetParent(Starcounter.Advanced.Configuration.IConfigurationElement,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Advanced.Configuration.ConfigurationElement.SetRole(System.String)">
            <summary>
            Sets the role of the current element in its parent.
            </summary>
            <param name="role">Role.</param>
        </member>
        <member name="M:Starcounter.Advanced.Configuration.ConfigurationElement.GetKeyPath">
            <summary>
            Gets key uniquely identifying the current element.
            </summary>
            <returns>A key uniquely identifying the current element,
            composed recursively from its parents.</returns>
        </member>
        <member name="M:Starcounter.Advanced.Configuration.ConfigurationElement.Clone">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Advanced.Configuration.ConfigurationElement.CopyTo(Starcounter.Advanced.Configuration.ConfigurationElement)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Advanced.Configuration.ConfigurationElement.ToString">
            <inheritdoc />
        </member>
        <member name="E:Starcounter.Advanced.Configuration.ConfigurationElement.PropertyChanged">
            <summary>
            Occurs when [property changed].
            </summary>
        </member>
        <member name="M:Starcounter.Advanced.Configuration.ConfigurationElement.OnPropertyChanged(System.String)">
            <summary>
            Called when [property changed].
            </summary>
            <param name="fieldName">Name of the field.</param>
        </member>
        <member name="T:Starcounter.Advanced.Configuration.ConfigurationFile">
            <summary>
            Base class for all configuration files.
            </summary>
        </member>
        <member name="M:Starcounter.Advanced.Configuration.ConfigurationFile.#ctor">
            <summary>
            Initializes a new <see cref="T:Starcounter.Advanced.Configuration.ConfigurationFile"/>.
            </summary>
        </member>
        <member name="M:Starcounter.Advanced.Configuration.ConfigurationFile.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Starcounter.Advanced.Configuration.ConfigurationFile"/>
            and specifies the corresponding file name.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Starcounter.Advanced.Configuration.ConfigurationFile.CopyTo(Starcounter.Advanced.Configuration.ConfigurationElement)">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Advanced.Configuration.ConfigurationFile.GetFileExtension">
            <summary>
            Gets the desired file extension for the current kind of
            configuration file.
            </summary>
            <returns>A file extension including the training dot.</returns>
        </member>
        <member name="P:Starcounter.Advanced.Configuration.ConfigurationFile.Name">
            <summary>
            Name of the configuration element, i.e. the configuration file name without extension.
            </summary>
            <remarks>
            This property is XML serializable so that it can be serialized
            for remote communication. However, it should not be stored to files.
            </remarks>
        </member>
        <member name="P:Starcounter.Advanced.Configuration.ConfigurationFile.ConfigurationFilePath">
            <summary>
            Gets or sets the path of the current configuration file.
            </summary>
        </member>
        <member name="M:Starcounter.Advanced.Configuration.ConfigurationFile.Save">
            <summary>
            Saves the current configuration file.
            </summary>
        </member>
        <member name="M:Starcounter.Advanced.Configuration.ConfigurationFile.Save(System.String)">
            <summary>
            Saves the current configuration file to disk.
            </summary>
        </member>
        <member name="M:Starcounter.Advanced.Configuration.ConfigurationFile.Load``1(System.String)">
            <summary>
            Loads and parses a configuration file.
            </summary>
            <typeparam name="T">Type of configuration file.</typeparam>
            <param name="fileName">File name.</param>
            <returns>The object representing the configuration file.</returns>
        </member>
        <member name="M:Starcounter.Advanced.Configuration.ConfigurationFile.Load``1(System.IO.Stream,System.String)">
            <summary>
            Loads and parses a configuration file from a <see cref="T:System.IO.Stream"/>.
            </summary>
            <typeparam name="T">Type of configuration file.</typeparam>
            <param name="stream">The source <see cref="T:System.IO.Stream"/>.</param>
            <param name="fileName">File name.</param>
            <returns>The object representing the configuration file.</returns>
        </member>
        <member name="M:Starcounter.Advanced.Configuration.ConfigurationFile.GetKeyPath">
            <inheritdoc />
        </member>
        <member name="T:Starcounter.Advanced.Configuration.IConfigurationElement">
            <summary>
            Defines the semantics of an element of a configuration file.
            </summary>
        </member>
        <member name="P:Starcounter.Advanced.Configuration.IConfigurationElement.Parent">
            <summary>
            Gets the parent element.
            </summary>
        </member>
        <member name="P:Starcounter.Advanced.Configuration.IConfigurationElement.Role">
            <summary>
            Gets the role of the current element in the parent element.
            </summary>
        </member>
        <member name="M:Starcounter.Advanced.Configuration.IConfigurationElement.SetParent(Starcounter.Advanced.Configuration.IConfigurationElement,System.String)">
            <summary>
            Sets the parent element and the role of the current element
            in the parent element.
            </summary>
            <param name="parent">Parent element.</param>
            <param name="role">Role of the current element in the parent element.</param>
        </member>
        <member name="T:Starcounter.Advanced.Configuration.IKeyPathAware">
            <summary>
            Defines a method <see cref="M:Starcounter.Advanced.Configuration.IKeyPathAware.GetKeyPath"/> that uniquely
            identifies the current object in an object tree.
            </summary>
        </member>
        <member name="M:Starcounter.Advanced.Configuration.IKeyPathAware.GetKeyPath">
            <summary>
            Gets a key that uniquely identifies the current
            object in an object tree.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="T:Starcounter.Advanced.Configuration.InvalidConfigurationException">
            <summary>
            Exception thrown upon invalid configuration.
            </summary>
        </member>
        <member name="M:Starcounter.Advanced.Configuration.InvalidConfigurationException.#ctor">
            <summary>
            Initializes a new <see cref="T:Starcounter.Advanced.Configuration.InvalidConfigurationException"/>.
            </summary>
        </member>
        <member name="M:Starcounter.Advanced.Configuration.InvalidConfigurationException.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Starcounter.Advanced.Configuration.InvalidConfigurationException"/> and specifies the message.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:Starcounter.Advanced.Configuration.InvalidConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new <see cref="T:Starcounter.Advanced.Configuration.InvalidConfigurationException"/> and specifies the message
            and inner <see cref="T:System.Exception"/>.
            </summary>
            <param name="message">Message.</param>
            <param name="inner">Inner exception.</param>
        </member>
        <member name="M:Starcounter.Advanced.Configuration.InvalidConfigurationException.#ctor(System.String,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Initializes a new <see cref="T:Starcounter.Advanced.Configuration.InvalidConfigurationException"/> and formats the exception message
            from a list of error messages.
            </summary>
            <param name="message">Exception message.</param>
            <param name="errors">List of error messages.</param>
        </member>
        <member name="M:Starcounter.Advanced.Configuration.InvalidConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor.
            </summary>
            <param name="info">Streaming info.</param>
            <param name="context">Context.</param>
        </member>
        <member name="T:Starcounter.Advanced.Configuration.DatabaseConfiguration">
            <summary>
            Configuration of a database instance.
            </summary>
        </member>
        <member name="M:Starcounter.Advanced.Configuration.DatabaseConfiguration.#ctor">
            <summary>
            Initializes a new <see cref="T:Starcounter.Advanced.Configuration.DatabaseConfiguration"/>.
            </summary>
        </member>
        <member name="F:Starcounter.Advanced.Configuration.DatabaseConfiguration.FileExtension">
            <summary>
            Extension of database instance configuration files.
            </summary>
        </member>
        <member name="P:Starcounter.Advanced.Configuration.DatabaseConfiguration.Runtime">
            <summary>
            Configuration of the database runtime.
            </summary>
        </member>
        <member name="P:Starcounter.Advanced.Configuration.DatabaseConfiguration.Monitoring">
            <summary>
            Monitoring options.
            </summary>
        </member>
        <member name="P:Starcounter.Advanced.Configuration.DatabaseConfiguration.TraceSources">
            <summary>
            Configuration of trace sources.
            </summary>
        </member>
        <member name="M:Starcounter.Advanced.Configuration.DatabaseConfiguration.GetFileExtension">
            <inheritdoc />
        </member>
        <member name="M:Starcounter.Advanced.Configuration.DatabaseConfiguration.Load(System.String)">
            <summary>
            Loads an <see cref="T:Starcounter.Advanced.Configuration.DatabaseConfiguration"/> from
            a file on disk.
            </summary>
            <param name="fileName">Name of the file to be loaded.</param>
            <returns>The <see cref="T:Starcounter.Advanced.Configuration.DatabaseConfiguration"/>
            loaded from <paramref name="fileName"/>.</returns>
        </member>
        <member name="M:Starcounter.Advanced.Configuration.DatabaseConfiguration.Load(System.IO.Stream,System.String)">
            <summary>
            Loads an <see cref="T:Starcounter.Advanced.Configuration.DatabaseConfiguration"/> from a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The source stream.</param>
            <param name="fileName">Logical name of the file corresponding to that stream.</param>
            <returns>An <see cref="T:Starcounter.Advanced.Configuration.DatabaseConfiguration"/> built from <paramref name="stream"/>.</returns>
        </member>
        <member name="M:Starcounter.Advanced.Configuration.DatabaseConfiguration.LoadAll(Starcounter.Advanced.Configuration.ServerConfiguration)">
            <summary>
            Gets a list of all database configurations (materialized) based on the
            given server configuration.
            </summary>
            <param name="serverConfiguration">The configuration to consult.</param>
            <returns>A list of all referenced database configurations.</returns>
        </member>
        <member name="M:Starcounter.Advanced.Configuration.DatabaseConfiguration.LoadAll(System.String)">
            <summary>
            Gets a list of all database configurations (materialized) based on the
            given database top-level repository directory.
            </summary>
            <param name="databasesDirectory">The directory in where the
            server keep database configurations.</param>
            <returns>A list of all referenced database configurations.</returns>
        </member>
        <member name="M:Starcounter.Advanced.Configuration.DatabaseConfiguration.GetAllFiles(Starcounter.Advanced.Configuration.ServerConfiguration)">
            <summary>
            Gets a list of all datbase configuration files based on the
            given server configuration.
            </summary>
            <param name="serverConfiguration">The configuration to consult.</param>
            <returns>A list of all referenced database configuration files.</returns>
        </member>
        <member name="M:Starcounter.Advanced.Configuration.DatabaseConfiguration.GetAllFiles(System.String)">
            <summary>
            Gets a list of all datbase configuration files based on the
            given database top-level repository directory.
            </summary>
            <param name="databasesDirectory">The directory in where the
            server keep database configurations.</param>
            <returns>A list of all referenced database configuration files.</returns>
        </member>
        <member name="M:Starcounter.Advanced.Configuration.DatabaseConfiguration.Clone(System.String)">
            <summary>
            Returns a deep clone of the current <see cref="T:Starcounter.Advanced.Configuration.DatabaseConfiguration"/>
            and assigns it a file name.
            </summary>
            <param name="configurationFilePath">File name to be assigned to the clone.</param>
            <returns>The clone.</returns>
        </member>
        <member name="T:Starcounter.Advanced.Configuration.DatabaseRuntimeConfiguration">
            <summary>
            Configures the runtime properties of a Starcounter database.
            </summary>
        </member>
        <member name="P:Starcounter.Advanced.Configuration.DatabaseRuntimeConfiguration.TempDirectory">
            <summary>
            Directory in which temporary files are stored.
            </summary>
        </member>
        <member name="P:Starcounter.Advanced.Configuration.DatabaseRuntimeConfiguration.ImageDirectory">
            <summary>
            Full path of the directory containing image files.
            </summary>
            <remarks>Required. No default value.</remarks>
        </member>
        <member name="P:Starcounter.Advanced.Configuration.DatabaseRuntimeConfiguration.TransactionLogDirectory">
            <summary>
            Full path of the directory containing transaction log files.
            </summary>
            <remarks>Required. No default value.</remarks>
        </member>
        <member name="P:Starcounter.Advanced.Configuration.DatabaseRuntimeConfiguration.DumpDirectory">
            <summary>
            Full path of the directory containing dump files.
            </summary>
            <remarks>
            By default, dump files are stored in <see cref="P:Starcounter.Advanced.Configuration.DatabaseRuntimeConfiguration.ImageDirectory"/>.
            </remarks>
        </member>
        <member name="P:Starcounter.Advanced.Configuration.DatabaseRuntimeConfiguration.SQLProcessPort">
            <summary>
            SQL Prolog process listening port number.
            </summary>
        </member>
        <member name="P:Starcounter.Advanced.Configuration.DatabaseRuntimeConfiguration.DefaultUserHttpPort">
            <summary>
            Gets the default user HTTP port.
            </summary>
            <value>The default user HTTP port.</value>
        </member>
        <member name="P:Starcounter.Advanced.Configuration.DatabaseRuntimeConfiguration.DefaultSessionTimeoutMinutes">
            <summary>
            Gets the default session timeout.
            </summary>
            <value>The default session timeout.</value>
        </member>
        <member name="P:Starcounter.Advanced.Configuration.DatabaseRuntimeConfiguration.SqlAggregationSupport">
            <summary>
            Support of aggregations in SQL queries, for which current implementation is very slow.
            </summary>
        </member>
        <member name="P:Starcounter.Advanced.Configuration.DatabaseRuntimeConfiguration.ChunksNumber">
            <summary>
            Number of shared memory chunks, dividable by 256.
            </summary>
        </member>
        <member name="P:Starcounter.Advanced.Configuration.DatabaseRuntimeConfiguration.SchedulerCount">
            <summary>
            Number of schedulers the database host should utilize.
            </summary>
            <remarks>
            The current default, applied if this property is set to NULL, is
            the number of processors on the hosting machine, as returned by
            <see cref="P:System.Environment.ProcessorCount"/>.
            </remarks>
        </member>
        <member name="T:Starcounter.Advanced.Configuration.TransactionConsistencyLevel">
            <summary>
            Levels of transaction consistency.
            </summary>
        </member>
        <member name="F:Starcounter.Advanced.Configuration.TransactionConsistencyLevel.MergingWrites">
            <summary>
            Fuzzy reads, merging writes.
            </summary>
        </member>
        <member name="F:Starcounter.Advanced.Configuration.TransactionConsistencyLevel.OrderedWrites">
            <summary>
            Fuzzy reads, ordered writes.
            </summary>
        </member>
        <member name="T:Starcounter.Advanced.Configuration.MonitoringConfiguration">
            <summary>
            Configures how the Starcounter server can start a database and if/how
            it should monitor its livetime.
            </summary>
        </member>
        <member name="P:Starcounter.Advanced.Configuration.MonitoringConfiguration.Engine">
            <summary>
            Name of the engine that should run the current engine.
            </summary>
        </member>
        <member name="P:Starcounter.Advanced.Configuration.MonitoringConfiguration.MaxRestartNumber">
            <summary>
            Maximum number of automatic restarts.
            </summary>
            <remarks><para>This counter is reset when the server is restarted, or when
            the database has been running successfully during the period defined by
            the <see cref="P:Starcounter.Advanced.Configuration.MonitoringConfiguration.ResetFailureCountPeriod"/> property.</para>
            <para>After the maximum number of automatic restarts is reached, the
            database will simply not be restarted in case of failure.</para>
            </remarks>
            <seealso cref="P:Starcounter.Advanced.Configuration.MonitoringConfiguration.ResetFailureCountPeriod"/>
        </member>
        <member name="P:Starcounter.Advanced.Configuration.MonitoringConfiguration.ResetFailureCountPeriod">
            <summary>
            Time span of successfull database execution, in minutes, after which
            the count of failures is reset.
             </summary>
            <seealso cref="P:Starcounter.Advanced.Configuration.MonitoringConfiguration.MaxRestartNumber"/>
        </member>
        <member name="P:Starcounter.Advanced.Configuration.MonitoringConfiguration.GracePeriodAfterConnectionLost">
            <summary>
            Time span, in seconds, measured from the moment that the communication
            with an database is broken, after which the OS process supporting an database
            should be killed in case the OS process did not spontaneously terminate.
            </summary>
        </member>
        <member name="P:Starcounter.Advanced.Configuration.MonitoringConfiguration.StartupType">
            <summary>
            Determines when the database should be started by the server.
            </summary>
        </member>
        <member name="P:Starcounter.Advanced.Configuration.MonitoringConfiguration.MonitoringType">
            <summary>
            Determines when the database should be restarted in case of
            failure.
            </summary>
        </member>
        <member name="M:Starcounter.Advanced.Configuration.MonitoringConfiguration.Clone">
            <summary>
            Returns a clone of the current <see cref="T:Starcounter.Advanced.Configuration.MonitoringConfiguration"/>.
            </summary>
            <returns>A clone of the current <see cref="T:Starcounter.Advanced.Configuration.MonitoringConfiguration"/>.</returns>
        </member>
        <member name="T:Starcounter.Advanced.Configuration.StartupType">
            <summary>
            Determines when servers should start databases.
            </summary>
        </member>
        <member name="F:Starcounter.Advanced.Configuration.StartupType.Automatic">
            <summary>
            The database should be started automatically upon server start up.
            </summary>
        </member>
        <member name="F:Starcounter.Advanced.Configuration.StartupType.Manual">
            <summary>
            The database should not be started automatically, but may
            be started manually.
            </summary>
        </member>
        <member name="F:Starcounter.Advanced.Configuration.StartupType.Disable">
            <summary>
            The server may not start the database.
            </summary>
        </member>
        <member name="T:Starcounter.Advanced.Configuration.MonitoringType">
            <summary>
            Determines when the database should be restarted in case of failure.
            </summary>
        </member>
        <member name="F:Starcounter.Advanced.Configuration.MonitoringType.RestartOnUnexpectedStop">
            <summary>
            Restart only when the database stopped unexpectedly, i.e.
            that restart unless a normal stopping request was issued
            using management APIes.
            </summary>
        </member>
        <member name="F:Starcounter.Advanced.Configuration.MonitoringType.Disabled">
            <summary>
            Never restarts the database.
            </summary>
        </member>
        <member name="T:Starcounter.Advanced.Configuration.ServerConfiguration">
            <summary>
            Configures the server.
            </summary>
        </member>
        <member name="F:Starcounter.Advanced.Configuration.ServerConfiguration.FileExtension">
            <summary>
            Extension of server configuration files (including the leading period).
            </summary>
        </member>
        <member name="M:Starcounter.Advanced.Configuration.ServerConfiguration.#ctor">
            <summary>
            Initializes a new <see cref="T:Starcounter.Advanced.Configuration.ServerConfiguration"/>.
            </summary>
        </member>
        <member name="M:Starcounter.Advanced.Configuration.ServerConfiguration.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Starcounter.Advanced.Configuration.ServerConfiguration"/>
            and specifies the file name.
            </summary>
            <param name="fileName">Name of the configuration file.</param>
        </member>
        <member name="M:Starcounter.Advanced.Configuration.ServerConfiguration.GetFileExtension">
            <inheritdoc />
        </member>
        <member name="P:Starcounter.Advanced.Configuration.ServerConfiguration.DatabaseDirectory">
            <summary>
            Path of the directory containing databases hosted by this server.
            </summary>
        </member>
        <member name="P:Starcounter.Advanced.Configuration.ServerConfiguration.EnginesDirectory">
            <summary>
            Path of the directory containing engine configuration files.
            </summary>
        </member>
        <member name="P:Starcounter.Advanced.Configuration.ServerConfiguration.TempDirectory">
            <summary>
            Path of the temporary directory;
            </summary>
        </member>
        <member name="P:Starcounter.Advanced.Configuration.ServerConfiguration.LogDirectory">
            <summary>
            Path of the directory used to store log files.
            </summary>
        </member>
        <member name="P:Starcounter.Advanced.Configuration.ServerConfiguration.SystemHttpPort">
            <summary>
            Tcp port number for Administrator.
            </summary>
        </member>
        <member name="P:Starcounter.Advanced.Configuration.ServerConfiguration.SystemHttpPortString">
            <summary>
            String representation.
            </summary>
        </member>
        <member name="P:Starcounter.Advanced.Configuration.ServerConfiguration.SendUsageAndCrashReports">
            <summary>
            Send usage statistics and crash reports to the tracker
            </summary>
        </member>
        <member name="P:Starcounter.Advanced.Configuration.ServerConfiguration.DefaultDatabaseStorageConfiguration">
            <summary>
            Gets or sets the default database storage properties
            for the server to use when creating new databases and
            no values are explicitly given.
            </summary>
        </member>
        <member name="P:Starcounter.Advanced.Configuration.ServerConfiguration.DefaultDatabaseConfiguration">
            <summary>
            Default configuration for instances of this engine.
            </summary>
            <remarks>
            Most instance-level parameters are optional, because the value is
            inferred from the default value by default. However, since the
            object in this property contains the default values, all its parameters
            are required.
            </remarks>
        </member>
        <member name="P:Starcounter.Advanced.Configuration.ServerConfiguration.TraceSources">
            <summary>
            Configuration of trace sources.
            </summary>
        </member>
        <member name="M:Starcounter.Advanced.Configuration.ServerConfiguration.GetResolvedDatabaseDirectory">
            <summary>
            Gets the full database directory path after any substitions
            have been made, resolved with the help of the current file if
            the configured path is relative.
            </summary>
            <returns>Full, resolved path to the database directory.
            </returns>
        </member>
        <member name="M:Starcounter.Advanced.Configuration.ServerConfiguration.GetResolvedTempDirectory">
            <summary>
            Gets the full temporary directory path after any substitions
            have been made, resolved with the help of the current file if
            the configured path is relative.
            </summary>
            <returns>Full, resolved path to the temporary directory.
            </returns>
        </member>
        <member name="M:Starcounter.Advanced.Configuration.ServerConfiguration.Load(System.String)">
            <summary>
            Loads an <see cref="T:Starcounter.Advanced.Configuration.ServerConfiguration"/> from a file.
            </summary>
            <param name="fileName">Name of the file containing the serialized <see cref="T:Starcounter.Advanced.Configuration.ServerConfiguration"/>.</param>
            <returns>The <see cref="T:Starcounter.Advanced.Configuration.ServerConfiguration"/> built from the file named <paramref name="fileName"/>.</returns>
        </member>
        <member name="M:Starcounter.Advanced.Configuration.ServerConfiguration.Clone">
            <summary>
            Returns a deep clone of the current instance.
            </summary>
            <returns>A deep clone of the current instance.</returns>
        </member>
        <member name="T:Starcounter.Advanced.Configuration.TraceSourceConfiguration">
            <summary>
            Configures the severity threshold of a trace source.
            </summary>
        </member>
        <member name="P:Starcounter.Advanced.Configuration.TraceSourceConfiguration.Severity">
            <summary>
            Minimal severity that needs to be logged for the given source.
            </summary>
        </member>
        <member name="T:Starcounter.Internal.Severity">
            <summary>
            Severity degrees for the Starcounter log.
            </summary>
        </member>
        <member name="F:Starcounter.Internal.Severity.Debug">
            <summary>
            A debug log entry.
            </summary>
        </member>
        <member name="F:Starcounter.Internal.Severity.AuditSuccess">
            <summary>
            Security audit success, occurring for example when a user successfully
            has been logged in to the server.
            </summary>
        </member>
        <member name="F:Starcounter.Internal.Severity.AuditFailure">
            <summary>
            Security audit failure, occurring for example when a user failed logging
            on to the server because of invalid credentials.
            </summary>
        </member>
        <member name="F:Starcounter.Internal.Severity.Notice">
            <summary>
            An informational log entry.
            </summary>
        </member>
        <member name="F:Starcounter.Internal.Severity.Warning">
            <summary>
            A warning log entry, signalling something odd and potentially dangerous,
            but not necessarily wrong.
            </summary>
        </member>
        <member name="F:Starcounter.Internal.Severity.Error">
            <summary>
            An error log entry, signalling a serious error which is likely to stop
            the server from functioning normally.
            </summary>
        </member>
        <member name="F:Starcounter.Internal.Severity.Critical">
            <summary>
            A critical log entry, signalling a critical failure which most likely
            will cause the server to shut down.
            </summary>
        </member>
    </members>
</doc>
